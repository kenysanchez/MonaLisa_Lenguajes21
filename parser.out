Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> VDummy F Main
Rule 2     VDummy -> V
Rule 3     V -> auxVarSimple
Rule 4     V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma
Rule 5     V -> <empty>
Rule 6     auxVarSimple -> V LET aux asignacion K puntoycoma
Rule 7     aux -> type ID
Rule 8     type -> INT
Rule 9     type -> FLT
Rule 10    A -> num
Rule 11    A -> A coma num
Rule 12    Main -> mainAux Z endAux
Rule 13    Main -> <empty>
Rule 14    mainAux -> BEGIN puntoycoma
Rule 15    endAux -> END puntoycoma
Rule 16    Z -> S puntoycoma
Rule 17    Z -> Z S puntoycoma
Rule 18    K -> ID
Rule 19    K -> num
Rule 20    F -> F FUNCTION ID abrellave S cierrallave
Rule 21    F -> <empty>
Rule 22    S -> ID abreparentesis cierraparentesis
Rule 23    S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
Rule 24    S -> READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
Rule 25    S -> PRINT abreparentesis M cierraparentesis
Rule 26    S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
Rule 27    S -> whileAux EL whileAux2 Z whileAux3
Rule 28    S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
Rule 29    S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
Rule 30    S -> ID D asignacion E
Rule 31    S -> BREAK
Rule 32    S -> <empty>
Rule 33    ifAux -> abrellave
Rule 34    ifAux2 -> abrellave
Rule 35    ifAux3 -> cierrallave
Rule 36    whileAux -> WHILE
Rule 37    whileAux2 -> abrellave
Rule 38    whileAux3 -> cierrallave
Rule 39    forAux -> type ID
Rule 40    forAux2 -> num
Rule 41    forAux3 -> EL
Rule 42    forAux4 -> ID suma num
Rule 43    forAux5 -> cierrallave
Rule 44    loopAux -> LOOP
Rule 45    B -> abrellave BREAK cierrallave
Rule 46    B -> <empty>
Rule 47    M -> comillasdobles K comillasdobles
Rule 48    M -> A
Rule 49    D -> abreparentesis A cierraparentesis
Rule 50    D -> <empty>
Rule 51    E -> expSuma
Rule 52    E -> expResta
Rule 53    E -> T
Rule 54    expSuma -> E suma T
Rule 55    expResta -> E resta T
Rule 56    T -> expMult
Rule 57    T -> expDiv
Rule 58    T -> X
Rule 59    expMult -> T multiplicacion X
Rule 60    expDiv -> T dividir X
Rule 61    X -> IDaux
Rule 62    X -> ID abreparentesis A cierraparentesis
Rule 63    X -> num
Rule 64    X -> abreparentesis E cierraparentesis
Rule 65    IDaux -> ID
Rule 66    EL -> AL
Rule 67    EL -> orAux
Rule 68    AL -> TL
Rule 69    AL -> andAux
Rule 70    orAux -> EL OR AL
Rule 71    andAux -> AL AND TL
Rule 72    TL -> abreparentesis EL cierraparentesis
Rule 73    TL -> Comp
Rule 74    Comp -> J W J
Rule 75    J -> ID abreparentesis A cierraparentesis
Rule 76    J -> IDoux
Rule 77    IDoux -> ID
Rule 78    IDoux -> num
Rule 79    W -> mayorigual
Rule 80    W -> menorigual
Rule 81    W -> menor
Rule 82    W -> mayor
Rule 83    W -> igualque
Rule 84    W -> diferenteque

Terminals, with rules where they appear

AND                  : 71
BEGIN                : 14
BREAK                : 31 45
ELSE                 : 23 26
END                  : 15
FLT                  : 9
FOR                  : 29
FUNCTION             : 20
ID                   : 7 18 20 22 24 26 30 39 42 62 65 75 77
IF                   : 23 26
INT                  : 8
LET                  : 4 6 26 29
LOOP                 : 44
OR                   : 70
PRINT                : 25
READ                 : 24
WHILE                : 36
abrellave            : 20 26 26 28 29 33 34 37 45
abreparentesis       : 4 22 24 24 25 26 28 29 49 62 64 72 75
asignacion           : 4 6 26 29 30
cierrallave          : 20 23 26 26 28 35 38 43 45
cierraparentesis     : 4 22 24 24 25 26 28 29 49 62 64 72 75
coma                 : 11
comillasdobles       : 47 47
diferenteque         : 84
dividir              : 60
error                : 
igualque             : 83
mayor                : 82
mayorigual           : 79
menor                : 81
menorigual           : 80
multiplicacion       : 59
num                  : 10 11 19 40 42 63 78
puntoycoma           : 4 6 14 15 16 17 29 29
resta                : 55
suma                 : 42 54

Nonterminals, with rules where they appear

A                    : 4 11 24 48 49 62 75
AL                   : 66 70 71
B                    : 28
Comp                 : 73
D                    : 30
E                    : 30 54 55 64
EL                   : 23 26 27 28 41 70 72
F                    : 1 20
IDaux                : 61
IDoux                : 76
J                    : 74 74
K                    : 6 47
M                    : 25
Main                 : 1
Programa             : 0
S                    : 16 17 20
T                    : 53 54 55 59 60
TL                   : 68 71
V                    : 2 4 6
VDummy               : 1
W                    : 74
X                    : 58 59 60
Z                    : 12 17 23 23 26 26 27 28 29
andAux               : 69
aux                  : 4 6
auxVarSimple         : 3
endAux               : 12
expDiv               : 57
expMult              : 56
expResta             : 52
expSuma              : 51
forAux               : 29
forAux2              : 29
forAux3              : 29
forAux4              : 29
forAux5              : 29
ifAux                : 23
ifAux2               : 23
ifAux3               : 23
loopAux              : 28
mainAux              : 12
orAux                : 67
type                 : 7 39
whileAux             : 27
whileAux2            : 27
whileAux3            : 27

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . VDummy F Main
    (2) VDummy -> . V
    (3) V -> . auxVarSimple
    (4) V -> . V LET aux asignacion abreparentesis A cierraparentesis puntoycoma
    (5) V -> .
    (6) auxVarSimple -> . V LET aux asignacion K puntoycoma

    LET             reduce using rule 5 (V -> .)
    FUNCTION        reduce using rule 5 (V -> .)
    BEGIN           reduce using rule 5 (V -> .)
    $end            reduce using rule 5 (V -> .)

    Programa                       shift and go to state 1
    VDummy                         shift and go to state 2
    V                              shift and go to state 3
    auxVarSimple                   shift and go to state 4

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> VDummy . F Main
    (20) F -> . F FUNCTION ID abrellave S cierrallave
    (21) F -> .

    FUNCTION        reduce using rule 21 (F -> .)
    BEGIN           reduce using rule 21 (F -> .)
    $end            reduce using rule 21 (F -> .)

    F                              shift and go to state 5

state 3

    (2) VDummy -> V .
    (4) V -> V . LET aux asignacion abreparentesis A cierraparentesis puntoycoma
    (6) auxVarSimple -> V . LET aux asignacion K puntoycoma

    FUNCTION        reduce using rule 2 (VDummy -> V .)
    BEGIN           reduce using rule 2 (VDummy -> V .)
    $end            reduce using rule 2 (VDummy -> V .)
    LET             shift and go to state 6


state 4

    (3) V -> auxVarSimple .

    LET             reduce using rule 3 (V -> auxVarSimple .)
    FUNCTION        reduce using rule 3 (V -> auxVarSimple .)
    BEGIN           reduce using rule 3 (V -> auxVarSimple .)
    $end            reduce using rule 3 (V -> auxVarSimple .)


state 5

    (1) Programa -> VDummy F . Main
    (20) F -> F . FUNCTION ID abrellave S cierrallave
    (12) Main -> . mainAux Z endAux
    (13) Main -> .
    (14) mainAux -> . BEGIN puntoycoma

    FUNCTION        shift and go to state 8
    $end            reduce using rule 13 (Main -> .)
    BEGIN           shift and go to state 10

    Main                           shift and go to state 7
    mainAux                        shift and go to state 9

state 6

    (4) V -> V LET . aux asignacion abreparentesis A cierraparentesis puntoycoma
    (6) auxVarSimple -> V LET . aux asignacion K puntoycoma
    (7) aux -> . type ID
    (8) type -> . INT
    (9) type -> . FLT

    INT             shift and go to state 13
    FLT             shift and go to state 14

    aux                            shift and go to state 11
    type                           shift and go to state 12

state 7

    (1) Programa -> VDummy F Main .

    $end            reduce using rule 1 (Programa -> VDummy F Main .)


state 8

    (20) F -> F FUNCTION . ID abrellave S cierrallave

    ID              shift and go to state 15


state 9

    (12) Main -> mainAux . Z endAux
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 16
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 10

    (14) mainAux -> BEGIN . puntoycoma

    puntoycoma      shift and go to state 29


state 11

    (4) V -> V LET aux . asignacion abreparentesis A cierraparentesis puntoycoma
    (6) auxVarSimple -> V LET aux . asignacion K puntoycoma

    asignacion      shift and go to state 30


state 12

    (7) aux -> type . ID

    ID              shift and go to state 31


state 13

    (8) type -> INT .

    ID              reduce using rule 8 (type -> INT .)


state 14

    (9) type -> FLT .

    ID              reduce using rule 9 (type -> FLT .)


state 15

    (20) F -> F FUNCTION ID . abrellave S cierrallave

    abrellave       shift and go to state 32


state 16

    (12) Main -> mainAux Z . endAux
    (17) Z -> Z . S puntoycoma
    (15) endAux -> . END puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    END             shift and go to state 35
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    endAux                         shift and go to state 33
    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 17

    (16) Z -> S . puntoycoma

    puntoycoma      shift and go to state 36


state 18

    (22) S -> ID . abreparentesis cierraparentesis
    (30) S -> ID . D asignacion E
    (49) D -> . abreparentesis A cierraparentesis
    (50) D -> .

    abreparentesis  shift and go to state 37
    asignacion      reduce using rule 50 (D -> .)

    D                              shift and go to state 38

state 19

    (23) S -> IF . EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    EL                             shift and go to state 39
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 20

    (24) S -> READ . abreparentesis ID abreparentesis A cierraparentesis cierraparentesis

    abreparentesis  shift and go to state 50


state 21

    (25) S -> PRINT . abreparentesis M cierraparentesis

    abreparentesis  shift and go to state 51


state 22

    (26) S -> LET . ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    ID              shift and go to state 52


state 23

    (27) S -> whileAux . EL whileAux2 Z whileAux3
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    EL                             shift and go to state 53
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 24

    (28) S -> loopAux . abrellave Z abreparentesis EL cierraparentesis B cierrallave

    abrellave       shift and go to state 54


state 25

    (29) S -> FOR . abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    abreparentesis  shift and go to state 55


state 26

    (31) S -> BREAK .

    puntoycoma      reduce using rule 31 (S -> BREAK .)
    cierrallave     reduce using rule 31 (S -> BREAK .)


state 27

    (36) whileAux -> WHILE .

    abreparentesis  reduce using rule 36 (whileAux -> WHILE .)
    ID              reduce using rule 36 (whileAux -> WHILE .)
    num             reduce using rule 36 (whileAux -> WHILE .)


state 28

    (44) loopAux -> LOOP .

    abrellave       reduce using rule 44 (loopAux -> LOOP .)


state 29

    (14) mainAux -> BEGIN puntoycoma .

    ID              reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    IF              reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    READ            reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    PRINT           reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    LET             reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    FOR             reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    BREAK           reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    WHILE           reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    LOOP            reduce using rule 14 (mainAux -> BEGIN puntoycoma .)
    puntoycoma      reduce using rule 14 (mainAux -> BEGIN puntoycoma .)


state 30

    (4) V -> V LET aux asignacion . abreparentesis A cierraparentesis puntoycoma
    (6) auxVarSimple -> V LET aux asignacion . K puntoycoma
    (18) K -> . ID
    (19) K -> . num

    abreparentesis  shift and go to state 56
    ID              shift and go to state 58
    num             shift and go to state 59

    K                              shift and go to state 57

state 31

    (7) aux -> type ID .

    asignacion      reduce using rule 7 (aux -> type ID .)


state 32

    (20) F -> F FUNCTION ID abrellave . S cierrallave
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    cierrallave     reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    S                              shift and go to state 60
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 33

    (12) Main -> mainAux Z endAux .

    $end            reduce using rule 12 (Main -> mainAux Z endAux .)


state 34

    (17) Z -> Z S . puntoycoma

    puntoycoma      shift and go to state 61


state 35

    (15) endAux -> END . puntoycoma

    puntoycoma      shift and go to state 62


state 36

    (16) Z -> S puntoycoma .

    END             reduce using rule 16 (Z -> S puntoycoma .)
    ID              reduce using rule 16 (Z -> S puntoycoma .)
    IF              reduce using rule 16 (Z -> S puntoycoma .)
    READ            reduce using rule 16 (Z -> S puntoycoma .)
    PRINT           reduce using rule 16 (Z -> S puntoycoma .)
    LET             reduce using rule 16 (Z -> S puntoycoma .)
    FOR             reduce using rule 16 (Z -> S puntoycoma .)
    BREAK           reduce using rule 16 (Z -> S puntoycoma .)
    WHILE           reduce using rule 16 (Z -> S puntoycoma .)
    LOOP            reduce using rule 16 (Z -> S puntoycoma .)
    puntoycoma      reduce using rule 16 (Z -> S puntoycoma .)
    abreparentesis  reduce using rule 16 (Z -> S puntoycoma .)
    cierrallave     reduce using rule 16 (Z -> S puntoycoma .)


state 37

    (22) S -> ID abreparentesis . cierraparentesis
    (49) D -> abreparentesis . A cierraparentesis
    (10) A -> . num
    (11) A -> . A coma num

    cierraparentesis shift and go to state 63
    num             shift and go to state 65

    A                              shift and go to state 64

state 38

    (30) S -> ID D . asignacion E

    asignacion      shift and go to state 66


state 39

    (23) S -> IF EL . ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (70) orAux -> EL . OR AL
    (33) ifAux -> . abrellave

    OR              shift and go to state 68
    abrellave       shift and go to state 69

    ifAux                          shift and go to state 67

state 40

    (66) EL -> AL .
    (71) andAux -> AL . AND TL

    OR              reduce using rule 66 (EL -> AL .)
    abrellave       reduce using rule 66 (EL -> AL .)
    cierraparentesis reduce using rule 66 (EL -> AL .)
    puntoycoma      reduce using rule 66 (EL -> AL .)
    AND             shift and go to state 70


state 41

    (67) EL -> orAux .

    OR              reduce using rule 67 (EL -> orAux .)
    abrellave       reduce using rule 67 (EL -> orAux .)
    cierraparentesis reduce using rule 67 (EL -> orAux .)
    puntoycoma      reduce using rule 67 (EL -> orAux .)


state 42

    (68) AL -> TL .

    AND             reduce using rule 68 (AL -> TL .)
    OR              reduce using rule 68 (AL -> TL .)
    abrellave       reduce using rule 68 (AL -> TL .)
    cierraparentesis reduce using rule 68 (AL -> TL .)
    puntoycoma      reduce using rule 68 (AL -> TL .)


state 43

    (69) AL -> andAux .

    AND             reduce using rule 69 (AL -> andAux .)
    OR              reduce using rule 69 (AL -> andAux .)
    abrellave       reduce using rule 69 (AL -> andAux .)
    cierraparentesis reduce using rule 69 (AL -> andAux .)
    puntoycoma      reduce using rule 69 (AL -> andAux .)


state 44

    (72) TL -> abreparentesis . EL cierraparentesis
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    EL                             shift and go to state 71
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 45

    (73) TL -> Comp .

    AND             reduce using rule 73 (TL -> Comp .)
    OR              reduce using rule 73 (TL -> Comp .)
    abrellave       reduce using rule 73 (TL -> Comp .)
    cierraparentesis reduce using rule 73 (TL -> Comp .)
    puntoycoma      reduce using rule 73 (TL -> Comp .)


state 46

    (74) Comp -> J . W J
    (79) W -> . mayorigual
    (80) W -> . menorigual
    (81) W -> . menor
    (82) W -> . mayor
    (83) W -> . igualque
    (84) W -> . diferenteque

    mayorigual      shift and go to state 73
    menorigual      shift and go to state 74
    menor           shift and go to state 75
    mayor           shift and go to state 76
    igualque        shift and go to state 77
    diferenteque    shift and go to state 78

    W                              shift and go to state 72

state 47

    (75) J -> ID . abreparentesis A cierraparentesis
    (77) IDoux -> ID .

    abreparentesis  shift and go to state 79
    mayorigual      reduce using rule 77 (IDoux -> ID .)
    menorigual      reduce using rule 77 (IDoux -> ID .)
    menor           reduce using rule 77 (IDoux -> ID .)
    mayor           reduce using rule 77 (IDoux -> ID .)
    igualque        reduce using rule 77 (IDoux -> ID .)
    diferenteque    reduce using rule 77 (IDoux -> ID .)
    AND             reduce using rule 77 (IDoux -> ID .)
    OR              reduce using rule 77 (IDoux -> ID .)
    abrellave       reduce using rule 77 (IDoux -> ID .)
    cierraparentesis reduce using rule 77 (IDoux -> ID .)
    puntoycoma      reduce using rule 77 (IDoux -> ID .)


state 48

    (76) J -> IDoux .

    mayorigual      reduce using rule 76 (J -> IDoux .)
    menorigual      reduce using rule 76 (J -> IDoux .)
    menor           reduce using rule 76 (J -> IDoux .)
    mayor           reduce using rule 76 (J -> IDoux .)
    igualque        reduce using rule 76 (J -> IDoux .)
    diferenteque    reduce using rule 76 (J -> IDoux .)
    AND             reduce using rule 76 (J -> IDoux .)
    OR              reduce using rule 76 (J -> IDoux .)
    abrellave       reduce using rule 76 (J -> IDoux .)
    cierraparentesis reduce using rule 76 (J -> IDoux .)
    puntoycoma      reduce using rule 76 (J -> IDoux .)


state 49

    (78) IDoux -> num .

    mayorigual      reduce using rule 78 (IDoux -> num .)
    menorigual      reduce using rule 78 (IDoux -> num .)
    menor           reduce using rule 78 (IDoux -> num .)
    mayor           reduce using rule 78 (IDoux -> num .)
    igualque        reduce using rule 78 (IDoux -> num .)
    diferenteque    reduce using rule 78 (IDoux -> num .)
    AND             reduce using rule 78 (IDoux -> num .)
    OR              reduce using rule 78 (IDoux -> num .)
    abrellave       reduce using rule 78 (IDoux -> num .)
    cierraparentesis reduce using rule 78 (IDoux -> num .)
    puntoycoma      reduce using rule 78 (IDoux -> num .)


state 50

    (24) S -> READ abreparentesis . ID abreparentesis A cierraparentesis cierraparentesis

    ID              shift and go to state 80


state 51

    (25) S -> PRINT abreparentesis . M cierraparentesis
    (47) M -> . comillasdobles K comillasdobles
    (48) M -> . A
    (10) A -> . num
    (11) A -> . A coma num

    comillasdobles  shift and go to state 82
    num             shift and go to state 65

    M                              shift and go to state 81
    A                              shift and go to state 83

state 52

    (26) S -> LET ID . asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    asignacion      shift and go to state 84


state 53

    (27) S -> whileAux EL . whileAux2 Z whileAux3
    (70) orAux -> EL . OR AL
    (37) whileAux2 -> . abrellave

    OR              shift and go to state 68
    abrellave       shift and go to state 86

    whileAux2                      shift and go to state 85

state 54

    (28) S -> loopAux abrellave . Z abreparentesis EL cierraparentesis B cierrallave
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    loopAux                        shift and go to state 24
    Z                              shift and go to state 87
    S                              shift and go to state 17
    whileAux                       shift and go to state 23

state 55

    (29) S -> FOR abreparentesis . LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    LET             shift and go to state 88


state 56

    (4) V -> V LET aux asignacion abreparentesis . A cierraparentesis puntoycoma
    (10) A -> . num
    (11) A -> . A coma num

    num             shift and go to state 65

    A                              shift and go to state 89

state 57

    (6) auxVarSimple -> V LET aux asignacion K . puntoycoma

    puntoycoma      shift and go to state 90


state 58

    (18) K -> ID .

    puntoycoma      reduce using rule 18 (K -> ID .)
    comillasdobles  reduce using rule 18 (K -> ID .)


state 59

    (19) K -> num .

    puntoycoma      reduce using rule 19 (K -> num .)
    comillasdobles  reduce using rule 19 (K -> num .)


state 60

    (20) F -> F FUNCTION ID abrellave S . cierrallave

    cierrallave     shift and go to state 91


state 61

    (17) Z -> Z S puntoycoma .

    END             reduce using rule 17 (Z -> Z S puntoycoma .)
    ID              reduce using rule 17 (Z -> Z S puntoycoma .)
    IF              reduce using rule 17 (Z -> Z S puntoycoma .)
    READ            reduce using rule 17 (Z -> Z S puntoycoma .)
    PRINT           reduce using rule 17 (Z -> Z S puntoycoma .)
    LET             reduce using rule 17 (Z -> Z S puntoycoma .)
    FOR             reduce using rule 17 (Z -> Z S puntoycoma .)
    BREAK           reduce using rule 17 (Z -> Z S puntoycoma .)
    WHILE           reduce using rule 17 (Z -> Z S puntoycoma .)
    LOOP            reduce using rule 17 (Z -> Z S puntoycoma .)
    puntoycoma      reduce using rule 17 (Z -> Z S puntoycoma .)
    abreparentesis  reduce using rule 17 (Z -> Z S puntoycoma .)
    cierrallave     reduce using rule 17 (Z -> Z S puntoycoma .)


state 62

    (15) endAux -> END puntoycoma .

    $end            reduce using rule 15 (endAux -> END puntoycoma .)


state 63

    (22) S -> ID abreparentesis cierraparentesis .

    puntoycoma      reduce using rule 22 (S -> ID abreparentesis cierraparentesis .)
    cierrallave     reduce using rule 22 (S -> ID abreparentesis cierraparentesis .)


state 64

    (49) D -> abreparentesis A . cierraparentesis
    (11) A -> A . coma num

    cierraparentesis shift and go to state 92
    coma            shift and go to state 93


state 65

    (10) A -> num .

    cierraparentesis reduce using rule 10 (A -> num .)
    coma            reduce using rule 10 (A -> num .)


state 66

    (30) S -> ID D asignacion . E
    (51) E -> . expSuma
    (52) E -> . expResta
    (53) E -> . T
    (54) expSuma -> . E suma T
    (55) expResta -> . E resta T
    (56) T -> . expMult
    (57) T -> . expDiv
    (58) T -> . X
    (59) expMult -> . T multiplicacion X
    (60) expDiv -> . T dividir X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    E                              shift and go to state 95
    expSuma                        shift and go to state 96
    expResta                       shift and go to state 97
    T                              shift and go to state 98
    expMult                        shift and go to state 99
    expDiv                         shift and go to state 100
    X                              shift and go to state 101
    IDaux                          shift and go to state 102

state 67

    (23) S -> IF EL ifAux . Z cierrallave ELSE ifAux2 Z ifAux3
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 105
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 68

    (70) orAux -> EL OR . AL
    (68) AL -> . TL
    (69) AL -> . andAux
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    AL                             shift and go to state 106
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 69

    (33) ifAux -> abrellave .

    ID              reduce using rule 33 (ifAux -> abrellave .)
    IF              reduce using rule 33 (ifAux -> abrellave .)
    READ            reduce using rule 33 (ifAux -> abrellave .)
    PRINT           reduce using rule 33 (ifAux -> abrellave .)
    LET             reduce using rule 33 (ifAux -> abrellave .)
    FOR             reduce using rule 33 (ifAux -> abrellave .)
    BREAK           reduce using rule 33 (ifAux -> abrellave .)
    WHILE           reduce using rule 33 (ifAux -> abrellave .)
    LOOP            reduce using rule 33 (ifAux -> abrellave .)
    puntoycoma      reduce using rule 33 (ifAux -> abrellave .)


state 70

    (71) andAux -> AL AND . TL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    TL                             shift and go to state 107
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 71

    (72) TL -> abreparentesis EL . cierraparentesis
    (70) orAux -> EL . OR AL

    cierraparentesis shift and go to state 108
    OR              shift and go to state 68


state 72

    (74) Comp -> J W . J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    ID              shift and go to state 47
    num             shift and go to state 49

    J                              shift and go to state 109
    IDoux                          shift and go to state 48

state 73

    (79) W -> mayorigual .

    ID              reduce using rule 79 (W -> mayorigual .)
    num             reduce using rule 79 (W -> mayorigual .)


state 74

    (80) W -> menorigual .

    ID              reduce using rule 80 (W -> menorigual .)
    num             reduce using rule 80 (W -> menorigual .)


state 75

    (81) W -> menor .

    ID              reduce using rule 81 (W -> menor .)
    num             reduce using rule 81 (W -> menor .)


state 76

    (82) W -> mayor .

    ID              reduce using rule 82 (W -> mayor .)
    num             reduce using rule 82 (W -> mayor .)


state 77

    (83) W -> igualque .

    ID              reduce using rule 83 (W -> igualque .)
    num             reduce using rule 83 (W -> igualque .)


state 78

    (84) W -> diferenteque .

    ID              reduce using rule 84 (W -> diferenteque .)
    num             reduce using rule 84 (W -> diferenteque .)


state 79

    (75) J -> ID abreparentesis . A cierraparentesis
    (10) A -> . num
    (11) A -> . A coma num

    num             shift and go to state 65

    A                              shift and go to state 110

state 80

    (24) S -> READ abreparentesis ID . abreparentesis A cierraparentesis cierraparentesis

    abreparentesis  shift and go to state 111


state 81

    (25) S -> PRINT abreparentesis M . cierraparentesis

    cierraparentesis shift and go to state 112


state 82

    (47) M -> comillasdobles . K comillasdobles
    (18) K -> . ID
    (19) K -> . num

    ID              shift and go to state 58
    num             shift and go to state 59

    K                              shift and go to state 113

state 83

    (48) M -> A .
    (11) A -> A . coma num

    cierraparentesis reduce using rule 48 (M -> A .)
    coma            shift and go to state 93


state 84

    (26) S -> LET ID asignacion . IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    IF              shift and go to state 114


state 85

    (27) S -> whileAux EL whileAux2 . Z whileAux3
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    whileAux                       shift and go to state 23
    Z                              shift and go to state 115
    S                              shift and go to state 17
    loopAux                        shift and go to state 24

state 86

    (37) whileAux2 -> abrellave .

    ID              reduce using rule 37 (whileAux2 -> abrellave .)
    IF              reduce using rule 37 (whileAux2 -> abrellave .)
    READ            reduce using rule 37 (whileAux2 -> abrellave .)
    PRINT           reduce using rule 37 (whileAux2 -> abrellave .)
    LET             reduce using rule 37 (whileAux2 -> abrellave .)
    FOR             reduce using rule 37 (whileAux2 -> abrellave .)
    BREAK           reduce using rule 37 (whileAux2 -> abrellave .)
    WHILE           reduce using rule 37 (whileAux2 -> abrellave .)
    LOOP            reduce using rule 37 (whileAux2 -> abrellave .)
    puntoycoma      reduce using rule 37 (whileAux2 -> abrellave .)


state 87

    (28) S -> loopAux abrellave Z . abreparentesis EL cierraparentesis B cierrallave
    (17) Z -> Z . S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    abreparentesis  shift and go to state 116
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    loopAux                        shift and go to state 24
    S                              shift and go to state 34
    whileAux                       shift and go to state 23

state 88

    (29) S -> FOR abreparentesis LET . forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (39) forAux -> . type ID
    (8) type -> . INT
    (9) type -> . FLT

    INT             shift and go to state 13
    FLT             shift and go to state 14

    forAux                         shift and go to state 117
    type                           shift and go to state 118

state 89

    (4) V -> V LET aux asignacion abreparentesis A . cierraparentesis puntoycoma
    (11) A -> A . coma num

    cierraparentesis shift and go to state 119
    coma            shift and go to state 93


state 90

    (6) auxVarSimple -> V LET aux asignacion K puntoycoma .

    LET             reduce using rule 6 (auxVarSimple -> V LET aux asignacion K puntoycoma .)
    FUNCTION        reduce using rule 6 (auxVarSimple -> V LET aux asignacion K puntoycoma .)
    BEGIN           reduce using rule 6 (auxVarSimple -> V LET aux asignacion K puntoycoma .)
    $end            reduce using rule 6 (auxVarSimple -> V LET aux asignacion K puntoycoma .)


state 91

    (20) F -> F FUNCTION ID abrellave S cierrallave .

    FUNCTION        reduce using rule 20 (F -> F FUNCTION ID abrellave S cierrallave .)
    BEGIN           reduce using rule 20 (F -> F FUNCTION ID abrellave S cierrallave .)
    $end            reduce using rule 20 (F -> F FUNCTION ID abrellave S cierrallave .)


state 92

    (49) D -> abreparentesis A cierraparentesis .

    asignacion      reduce using rule 49 (D -> abreparentesis A cierraparentesis .)


state 93

    (11) A -> A coma . num

    num             shift and go to state 120


state 94

    (62) X -> ID . abreparentesis A cierraparentesis
    (65) IDaux -> ID .

    abreparentesis  shift and go to state 121
    multiplicacion  reduce using rule 65 (IDaux -> ID .)
    dividir         reduce using rule 65 (IDaux -> ID .)
    suma            reduce using rule 65 (IDaux -> ID .)
    resta           reduce using rule 65 (IDaux -> ID .)
    puntoycoma      reduce using rule 65 (IDaux -> ID .)
    cierrallave     reduce using rule 65 (IDaux -> ID .)
    cierraparentesis reduce using rule 65 (IDaux -> ID .)


state 95

    (30) S -> ID D asignacion E .
    (54) expSuma -> E . suma T
    (55) expResta -> E . resta T

    puntoycoma      reduce using rule 30 (S -> ID D asignacion E .)
    cierrallave     reduce using rule 30 (S -> ID D asignacion E .)
    suma            shift and go to state 122
    resta           shift and go to state 123


state 96

    (51) E -> expSuma .

    suma            reduce using rule 51 (E -> expSuma .)
    resta           reduce using rule 51 (E -> expSuma .)
    puntoycoma      reduce using rule 51 (E -> expSuma .)
    cierrallave     reduce using rule 51 (E -> expSuma .)
    cierraparentesis reduce using rule 51 (E -> expSuma .)


state 97

    (52) E -> expResta .

    suma            reduce using rule 52 (E -> expResta .)
    resta           reduce using rule 52 (E -> expResta .)
    puntoycoma      reduce using rule 52 (E -> expResta .)
    cierrallave     reduce using rule 52 (E -> expResta .)
    cierraparentesis reduce using rule 52 (E -> expResta .)


state 98

    (53) E -> T .
    (59) expMult -> T . multiplicacion X
    (60) expDiv -> T . dividir X

    suma            reduce using rule 53 (E -> T .)
    resta           reduce using rule 53 (E -> T .)
    puntoycoma      reduce using rule 53 (E -> T .)
    cierrallave     reduce using rule 53 (E -> T .)
    cierraparentesis reduce using rule 53 (E -> T .)
    multiplicacion  shift and go to state 124
    dividir         shift and go to state 125


state 99

    (56) T -> expMult .

    multiplicacion  reduce using rule 56 (T -> expMult .)
    dividir         reduce using rule 56 (T -> expMult .)
    suma            reduce using rule 56 (T -> expMult .)
    resta           reduce using rule 56 (T -> expMult .)
    puntoycoma      reduce using rule 56 (T -> expMult .)
    cierrallave     reduce using rule 56 (T -> expMult .)
    cierraparentesis reduce using rule 56 (T -> expMult .)


state 100

    (57) T -> expDiv .

    multiplicacion  reduce using rule 57 (T -> expDiv .)
    dividir         reduce using rule 57 (T -> expDiv .)
    suma            reduce using rule 57 (T -> expDiv .)
    resta           reduce using rule 57 (T -> expDiv .)
    puntoycoma      reduce using rule 57 (T -> expDiv .)
    cierrallave     reduce using rule 57 (T -> expDiv .)
    cierraparentesis reduce using rule 57 (T -> expDiv .)


state 101

    (58) T -> X .

    multiplicacion  reduce using rule 58 (T -> X .)
    dividir         reduce using rule 58 (T -> X .)
    suma            reduce using rule 58 (T -> X .)
    resta           reduce using rule 58 (T -> X .)
    puntoycoma      reduce using rule 58 (T -> X .)
    cierrallave     reduce using rule 58 (T -> X .)
    cierraparentesis reduce using rule 58 (T -> X .)


state 102

    (61) X -> IDaux .

    multiplicacion  reduce using rule 61 (X -> IDaux .)
    dividir         reduce using rule 61 (X -> IDaux .)
    suma            reduce using rule 61 (X -> IDaux .)
    resta           reduce using rule 61 (X -> IDaux .)
    puntoycoma      reduce using rule 61 (X -> IDaux .)
    cierrallave     reduce using rule 61 (X -> IDaux .)
    cierraparentesis reduce using rule 61 (X -> IDaux .)


state 103

    (64) X -> abreparentesis . E cierraparentesis
    (51) E -> . expSuma
    (52) E -> . expResta
    (53) E -> . T
    (54) expSuma -> . E suma T
    (55) expResta -> . E resta T
    (56) T -> . expMult
    (57) T -> . expDiv
    (58) T -> . X
    (59) expMult -> . T multiplicacion X
    (60) expDiv -> . T dividir X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    E                              shift and go to state 126
    expSuma                        shift and go to state 96
    expResta                       shift and go to state 97
    T                              shift and go to state 98
    expMult                        shift and go to state 99
    expDiv                         shift and go to state 100
    X                              shift and go to state 101
    IDaux                          shift and go to state 102

state 104

    (63) X -> num .

    multiplicacion  reduce using rule 63 (X -> num .)
    dividir         reduce using rule 63 (X -> num .)
    suma            reduce using rule 63 (X -> num .)
    resta           reduce using rule 63 (X -> num .)
    puntoycoma      reduce using rule 63 (X -> num .)
    cierrallave     reduce using rule 63 (X -> num .)
    cierraparentesis reduce using rule 63 (X -> num .)


state 105

    (23) S -> IF EL ifAux Z . cierrallave ELSE ifAux2 Z ifAux3
    (17) Z -> Z . S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 127
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 106

    (70) orAux -> EL OR AL .
    (71) andAux -> AL . AND TL

    OR              reduce using rule 70 (orAux -> EL OR AL .)
    abrellave       reduce using rule 70 (orAux -> EL OR AL .)
    cierraparentesis reduce using rule 70 (orAux -> EL OR AL .)
    puntoycoma      reduce using rule 70 (orAux -> EL OR AL .)
    AND             shift and go to state 70


state 107

    (71) andAux -> AL AND TL .

    AND             reduce using rule 71 (andAux -> AL AND TL .)
    OR              reduce using rule 71 (andAux -> AL AND TL .)
    abrellave       reduce using rule 71 (andAux -> AL AND TL .)
    cierraparentesis reduce using rule 71 (andAux -> AL AND TL .)
    puntoycoma      reduce using rule 71 (andAux -> AL AND TL .)


state 108

    (72) TL -> abreparentesis EL cierraparentesis .

    AND             reduce using rule 72 (TL -> abreparentesis EL cierraparentesis .)
    OR              reduce using rule 72 (TL -> abreparentesis EL cierraparentesis .)
    abrellave       reduce using rule 72 (TL -> abreparentesis EL cierraparentesis .)
    cierraparentesis reduce using rule 72 (TL -> abreparentesis EL cierraparentesis .)
    puntoycoma      reduce using rule 72 (TL -> abreparentesis EL cierraparentesis .)


state 109

    (74) Comp -> J W J .

    AND             reduce using rule 74 (Comp -> J W J .)
    OR              reduce using rule 74 (Comp -> J W J .)
    abrellave       reduce using rule 74 (Comp -> J W J .)
    cierraparentesis reduce using rule 74 (Comp -> J W J .)
    puntoycoma      reduce using rule 74 (Comp -> J W J .)


state 110

    (75) J -> ID abreparentesis A . cierraparentesis
    (11) A -> A . coma num

    cierraparentesis shift and go to state 128
    coma            shift and go to state 93


state 111

    (24) S -> READ abreparentesis ID abreparentesis . A cierraparentesis cierraparentesis
    (10) A -> . num
    (11) A -> . A coma num

    num             shift and go to state 65

    A                              shift and go to state 129

state 112

    (25) S -> PRINT abreparentesis M cierraparentesis .

    puntoycoma      reduce using rule 25 (S -> PRINT abreparentesis M cierraparentesis .)
    cierrallave     reduce using rule 25 (S -> PRINT abreparentesis M cierraparentesis .)


state 113

    (47) M -> comillasdobles K . comillasdobles

    comillasdobles  shift and go to state 130


state 114

    (26) S -> LET ID asignacion IF . abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    abreparentesis  shift and go to state 131


state 115

    (27) S -> whileAux EL whileAux2 Z . whileAux3
    (17) Z -> Z . S puntoycoma
    (38) whileAux3 -> . cierrallave
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 133
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    whileAux                       shift and go to state 23
    whileAux3                      shift and go to state 132
    S                              shift and go to state 34
    loopAux                        shift and go to state 24

state 116

    (28) S -> loopAux abrellave Z abreparentesis . EL cierraparentesis B cierrallave
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    EL                             shift and go to state 134
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 117

    (29) S -> FOR abreparentesis LET forAux . asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    asignacion      shift and go to state 135


state 118

    (39) forAux -> type . ID

    ID              shift and go to state 136


state 119

    (4) V -> V LET aux asignacion abreparentesis A cierraparentesis . puntoycoma

    puntoycoma      shift and go to state 137


state 120

    (11) A -> A coma num .

    cierraparentesis reduce using rule 11 (A -> A coma num .)
    coma            reduce using rule 11 (A -> A coma num .)


state 121

    (62) X -> ID abreparentesis . A cierraparentesis
    (10) A -> . num
    (11) A -> . A coma num

    num             shift and go to state 65

    A                              shift and go to state 138

state 122

    (54) expSuma -> E suma . T
    (56) T -> . expMult
    (57) T -> . expDiv
    (58) T -> . X
    (59) expMult -> . T multiplicacion X
    (60) expDiv -> . T dividir X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    T                              shift and go to state 139
    expMult                        shift and go to state 99
    expDiv                         shift and go to state 100
    X                              shift and go to state 101
    IDaux                          shift and go to state 102

state 123

    (55) expResta -> E resta . T
    (56) T -> . expMult
    (57) T -> . expDiv
    (58) T -> . X
    (59) expMult -> . T multiplicacion X
    (60) expDiv -> . T dividir X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    T                              shift and go to state 140
    expMult                        shift and go to state 99
    expDiv                         shift and go to state 100
    X                              shift and go to state 101
    IDaux                          shift and go to state 102

state 124

    (59) expMult -> T multiplicacion . X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    X                              shift and go to state 141
    IDaux                          shift and go to state 102

state 125

    (60) expDiv -> T dividir . X
    (61) X -> . IDaux
    (62) X -> . ID abreparentesis A cierraparentesis
    (63) X -> . num
    (64) X -> . abreparentesis E cierraparentesis
    (65) IDaux -> . ID

    ID              shift and go to state 94
    num             shift and go to state 104
    abreparentesis  shift and go to state 103

    X                              shift and go to state 142
    IDaux                          shift and go to state 102

state 126

    (64) X -> abreparentesis E . cierraparentesis
    (54) expSuma -> E . suma T
    (55) expResta -> E . resta T

    cierraparentesis shift and go to state 143
    suma            shift and go to state 122
    resta           shift and go to state 123


state 127

    (23) S -> IF EL ifAux Z cierrallave . ELSE ifAux2 Z ifAux3

    ELSE            shift and go to state 144


state 128

    (75) J -> ID abreparentesis A cierraparentesis .

    mayorigual      reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    menorigual      reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    menor           reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    mayor           reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    igualque        reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    diferenteque    reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    AND             reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    OR              reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    abrellave       reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    cierraparentesis reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)
    puntoycoma      reduce using rule 75 (J -> ID abreparentesis A cierraparentesis .)


state 129

    (24) S -> READ abreparentesis ID abreparentesis A . cierraparentesis cierraparentesis
    (11) A -> A . coma num

    cierraparentesis shift and go to state 145
    coma            shift and go to state 93


state 130

    (47) M -> comillasdobles K comillasdobles .

    cierraparentesis reduce using rule 47 (M -> comillasdobles K comillasdobles .)


state 131

    (26) S -> LET ID asignacion IF abreparentesis . EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    EL                             shift and go to state 146
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 132

    (27) S -> whileAux EL whileAux2 Z whileAux3 .

    puntoycoma      reduce using rule 27 (S -> whileAux EL whileAux2 Z whileAux3 .)
    cierrallave     reduce using rule 27 (S -> whileAux EL whileAux2 Z whileAux3 .)


state 133

    (38) whileAux3 -> cierrallave .

    puntoycoma      reduce using rule 38 (whileAux3 -> cierrallave .)
    cierrallave     reduce using rule 38 (whileAux3 -> cierrallave .)


state 134

    (28) S -> loopAux abrellave Z abreparentesis EL . cierraparentesis B cierrallave
    (70) orAux -> EL . OR AL

    cierraparentesis shift and go to state 147
    OR              shift and go to state 68


state 135

    (29) S -> FOR abreparentesis LET forAux asignacion . forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (40) forAux2 -> . num

    num             shift and go to state 149

    forAux2                        shift and go to state 148

state 136

    (39) forAux -> type ID .

    asignacion      reduce using rule 39 (forAux -> type ID .)


state 137

    (4) V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma .

    LET             reduce using rule 4 (V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma .)
    FUNCTION        reduce using rule 4 (V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma .)
    BEGIN           reduce using rule 4 (V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma .)
    $end            reduce using rule 4 (V -> V LET aux asignacion abreparentesis A cierraparentesis puntoycoma .)


state 138

    (62) X -> ID abreparentesis A . cierraparentesis
    (11) A -> A . coma num

    cierraparentesis shift and go to state 150
    coma            shift and go to state 93


state 139

    (54) expSuma -> E suma T .
    (59) expMult -> T . multiplicacion X
    (60) expDiv -> T . dividir X

    suma            reduce using rule 54 (expSuma -> E suma T .)
    resta           reduce using rule 54 (expSuma -> E suma T .)
    puntoycoma      reduce using rule 54 (expSuma -> E suma T .)
    cierrallave     reduce using rule 54 (expSuma -> E suma T .)
    cierraparentesis reduce using rule 54 (expSuma -> E suma T .)
    multiplicacion  shift and go to state 124
    dividir         shift and go to state 125


state 140

    (55) expResta -> E resta T .
    (59) expMult -> T . multiplicacion X
    (60) expDiv -> T . dividir X

    suma            reduce using rule 55 (expResta -> E resta T .)
    resta           reduce using rule 55 (expResta -> E resta T .)
    puntoycoma      reduce using rule 55 (expResta -> E resta T .)
    cierrallave     reduce using rule 55 (expResta -> E resta T .)
    cierraparentesis reduce using rule 55 (expResta -> E resta T .)
    multiplicacion  shift and go to state 124
    dividir         shift and go to state 125


state 141

    (59) expMult -> T multiplicacion X .

    multiplicacion  reduce using rule 59 (expMult -> T multiplicacion X .)
    dividir         reduce using rule 59 (expMult -> T multiplicacion X .)
    suma            reduce using rule 59 (expMult -> T multiplicacion X .)
    resta           reduce using rule 59 (expMult -> T multiplicacion X .)
    puntoycoma      reduce using rule 59 (expMult -> T multiplicacion X .)
    cierrallave     reduce using rule 59 (expMult -> T multiplicacion X .)
    cierraparentesis reduce using rule 59 (expMult -> T multiplicacion X .)


state 142

    (60) expDiv -> T dividir X .

    multiplicacion  reduce using rule 60 (expDiv -> T dividir X .)
    dividir         reduce using rule 60 (expDiv -> T dividir X .)
    suma            reduce using rule 60 (expDiv -> T dividir X .)
    resta           reduce using rule 60 (expDiv -> T dividir X .)
    puntoycoma      reduce using rule 60 (expDiv -> T dividir X .)
    cierrallave     reduce using rule 60 (expDiv -> T dividir X .)
    cierraparentesis reduce using rule 60 (expDiv -> T dividir X .)


state 143

    (64) X -> abreparentesis E cierraparentesis .

    multiplicacion  reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    dividir         reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    suma            reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    resta           reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    puntoycoma      reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    cierrallave     reduce using rule 64 (X -> abreparentesis E cierraparentesis .)
    cierraparentesis reduce using rule 64 (X -> abreparentesis E cierraparentesis .)


state 144

    (23) S -> IF EL ifAux Z cierrallave ELSE . ifAux2 Z ifAux3
    (34) ifAux2 -> . abrellave

    abrellave       shift and go to state 152

    ifAux2                         shift and go to state 151

state 145

    (24) S -> READ abreparentesis ID abreparentesis A cierraparentesis . cierraparentesis

    cierraparentesis shift and go to state 153


state 146

    (26) S -> LET ID asignacion IF abreparentesis EL . cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (70) orAux -> EL . OR AL

    cierraparentesis shift and go to state 154
    OR              shift and go to state 68


state 147

    (28) S -> loopAux abrellave Z abreparentesis EL cierraparentesis . B cierrallave
    (45) B -> . abrellave BREAK cierrallave
    (46) B -> .

    abrellave       shift and go to state 155
    cierrallave     reduce using rule 46 (B -> .)

    B                              shift and go to state 156

state 148

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 . puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    puntoycoma      shift and go to state 157


state 149

    (40) forAux2 -> num .

    puntoycoma      reduce using rule 40 (forAux2 -> num .)


state 150

    (62) X -> ID abreparentesis A cierraparentesis .

    multiplicacion  reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    dividir         reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    suma            reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    resta           reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    puntoycoma      reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    cierrallave     reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)
    cierraparentesis reduce using rule 62 (X -> ID abreparentesis A cierraparentesis .)


state 151

    (23) S -> IF EL ifAux Z cierrallave ELSE ifAux2 . Z ifAux3
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 158
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 152

    (34) ifAux2 -> abrellave .

    ID              reduce using rule 34 (ifAux2 -> abrellave .)
    IF              reduce using rule 34 (ifAux2 -> abrellave .)
    READ            reduce using rule 34 (ifAux2 -> abrellave .)
    PRINT           reduce using rule 34 (ifAux2 -> abrellave .)
    LET             reduce using rule 34 (ifAux2 -> abrellave .)
    FOR             reduce using rule 34 (ifAux2 -> abrellave .)
    BREAK           reduce using rule 34 (ifAux2 -> abrellave .)
    WHILE           reduce using rule 34 (ifAux2 -> abrellave .)
    LOOP            reduce using rule 34 (ifAux2 -> abrellave .)
    puntoycoma      reduce using rule 34 (ifAux2 -> abrellave .)


state 153

    (24) S -> READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis .

    puntoycoma      reduce using rule 24 (S -> READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis .)
    cierrallave     reduce using rule 24 (S -> READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis .)


state 154

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis . abrellave Z cierrallave ELSE abrellave Z cierrallave

    abrellave       shift and go to state 159


state 155

    (45) B -> abrellave . BREAK cierrallave

    BREAK           shift and go to state 160


state 156

    (28) S -> loopAux abrellave Z abreparentesis EL cierraparentesis B . cierrallave

    cierrallave     shift and go to state 161


state 157

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma . forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (41) forAux3 -> . EL
    (66) EL -> . AL
    (67) EL -> . orAux
    (68) AL -> . TL
    (69) AL -> . andAux
    (70) orAux -> . EL OR AL
    (72) TL -> . abreparentesis EL cierraparentesis
    (73) TL -> . Comp
    (71) andAux -> . AL AND TL
    (74) Comp -> . J W J
    (75) J -> . ID abreparentesis A cierraparentesis
    (76) J -> . IDoux
    (77) IDoux -> . ID
    (78) IDoux -> . num

    abreparentesis  shift and go to state 44
    ID              shift and go to state 47
    num             shift and go to state 49

    forAux3                        shift and go to state 162
    EL                             shift and go to state 163
    AL                             shift and go to state 40
    orAux                          shift and go to state 41
    TL                             shift and go to state 42
    andAux                         shift and go to state 43
    Comp                           shift and go to state 45
    J                              shift and go to state 46
    IDoux                          shift and go to state 48

state 158

    (23) S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z . ifAux3
    (17) Z -> Z . S puntoycoma
    (35) ifAux3 -> . cierrallave
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 164
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    ifAux3                         shift and go to state 165
    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 159

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave . Z cierrallave ELSE abrellave Z cierrallave
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 166
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 160

    (45) B -> abrellave BREAK . cierrallave

    cierrallave     shift and go to state 167


state 161

    (28) S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .

    puntoycoma      reduce using rule 28 (S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .)
    cierrallave     reduce using rule 28 (S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .)


state 162

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 . puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    puntoycoma      shift and go to state 168


state 163

    (41) forAux3 -> EL .
    (70) orAux -> EL . OR AL

    puntoycoma      reduce using rule 41 (forAux3 -> EL .)
    OR              shift and go to state 68


state 164

    (35) ifAux3 -> cierrallave .

    puntoycoma      reduce using rule 35 (ifAux3 -> cierrallave .)
    cierrallave     reduce using rule 35 (ifAux3 -> cierrallave .)


state 165

    (23) S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .

    puntoycoma      reduce using rule 23 (S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .)
    cierrallave     reduce using rule 23 (S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .)


state 166

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z . cierrallave ELSE abrellave Z cierrallave
    (17) Z -> Z . S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 169
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 167

    (45) B -> abrellave BREAK cierrallave .

    cierrallave     reduce using rule 45 (B -> abrellave BREAK cierrallave .)


state 168

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma . forAux4 cierraparentesis abrellave Z forAux5
    (42) forAux4 -> . ID suma num

    ID              shift and go to state 171

    forAux4                        shift and go to state 170

state 169

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave . ELSE abrellave Z cierrallave

    ELSE            shift and go to state 172


state 170

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 . cierraparentesis abrellave Z forAux5

    cierraparentesis shift and go to state 173


state 171

    (42) forAux4 -> ID . suma num

    suma            shift and go to state 174


state 172

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE . abrellave Z cierrallave

    abrellave       shift and go to state 175


state 173

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis . abrellave Z forAux5

    abrellave       shift and go to state 176


state 174

    (42) forAux4 -> ID suma . num

    num             shift and go to state 177


state 175

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave . Z cierrallave
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 178
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 176

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave . Z forAux5
    (16) Z -> . S puntoycoma
    (17) Z -> . Z S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    Z                              shift and go to state 179
    S                              shift and go to state 17
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 177

    (42) forAux4 -> ID suma num .

    cierraparentesis reduce using rule 42 (forAux4 -> ID suma num .)


state 178

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z . cierrallave
    (17) Z -> Z . S puntoycoma
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 180
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 179

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z . forAux5
    (17) Z -> Z . S puntoycoma
    (43) forAux5 -> . cierrallave
    (22) S -> . ID abreparentesis cierraparentesis
    (23) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (24) S -> . READ abreparentesis ID abreparentesis A cierraparentesis cierraparentesis
    (25) S -> . PRINT abreparentesis M cierraparentesis
    (26) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (27) S -> . whileAux EL whileAux2 Z whileAux3
    (28) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (29) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (30) S -> . ID D asignacion E
    (31) S -> . BREAK
    (32) S -> .
    (36) whileAux -> . WHILE
    (44) loopAux -> . LOOP

    cierrallave     shift and go to state 182
    ID              shift and go to state 18
    IF              shift and go to state 19
    READ            shift and go to state 20
    PRINT           shift and go to state 21
    LET             shift and go to state 22
    FOR             shift and go to state 25
    BREAK           shift and go to state 26
    puntoycoma      reduce using rule 32 (S -> .)
    WHILE           shift and go to state 27
    LOOP            shift and go to state 28

    forAux5                        shift and go to state 181
    S                              shift and go to state 34
    whileAux                       shift and go to state 23
    loopAux                        shift and go to state 24

state 180

    (26) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .

    puntoycoma      reduce using rule 26 (S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .)
    cierrallave     reduce using rule 26 (S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .)


state 181

    (29) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .

    puntoycoma      reduce using rule 29 (S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .)
    cierrallave     reduce using rule 29 (S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .)


state 182

    (43) forAux5 -> cierrallave .

    puntoycoma      reduce using rule 43 (forAux5 -> cierrallave .)
    cierrallave     reduce using rule 43 (forAux5 -> cierrallave .)

