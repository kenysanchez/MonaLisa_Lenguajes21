Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> Programa
Rule 1     Programa -> VDummy F Main
Rule 2     VDummy -> V
Rule 3     V -> auxVarSimple
Rule 4     V -> auxVarArray
Rule 5     V -> <empty>
Rule 6     auxVarSimple -> V LET auxVar asignacion K puntoycoma
Rule 7     auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma
Rule 8     auxVar -> type ID
Rule 9     type -> INT
Rule 10    type -> FLT
Rule 11    A -> num
Rule 12    A -> Aaux
Rule 13    Aaux -> A coma num
Rule 14    Main -> mainAux Z endAux
Rule 15    Main -> <empty>
Rule 16    mainAux -> BEGIN puntoycoma
Rule 17    endAux -> END puntoycoma
Rule 18    Z -> S puntoycoma
Rule 19    Z -> Z S puntoycoma
Rule 20    K -> ID
Rule 21    K -> num
Rule 22    F -> F FUNCTION ID abrellave S cierrallave
Rule 23    F -> <empty>
Rule 24    S -> ID abreparentesis cierraparentesis
Rule 25    S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
Rule 26    S -> READ abreparentesis readAux cierraparentesis
Rule 27    S -> PRINT abreparentesis printAux cierraparentesis
Rule 28    S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
Rule 29    S -> whileAux EL whileAux2 Z whileAux3
Rule 30    S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
Rule 31    S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
Rule 32    S -> Asignacion
Rule 33    S -> BREAK
Rule 34    S -> <empty>
Rule 35    ifAux -> abrellave
Rule 36    ifAux2 -> abrellave
Rule 37    ifAux3 -> cierrallave
Rule 38    readAux -> readAux2
Rule 39    readAux -> ID abrellave A cierrallave
Rule 40    readAux2 -> ID
Rule 41    printAux -> M
Rule 42    whileAux -> WHILE
Rule 43    whileAux2 -> abrellave
Rule 44    whileAux3 -> cierrallave
Rule 45    forAux -> type ID
Rule 46    forAux2 -> num
Rule 47    forAux3 -> EL
Rule 48    forAux4 -> ID suma num
Rule 49    forAux5 -> cierrallave
Rule 50    loopAux -> LOOP
Rule 51    B -> abrellave BREAK cierrallave
Rule 52    B -> <empty>
Rule 53    M -> K
Rule 54    M -> A
Rule 55    Asignacion -> ID D asignacion E
Rule 56    D -> abreparentesis A cierraparentesis
Rule 57    D -> <empty>
Rule 58    E -> expSuma
Rule 59    E -> expResta
Rule 60    E -> T
Rule 61    expSuma -> E suma T
Rule 62    expResta -> E resta T
Rule 63    T -> expMult
Rule 64    T -> expDiv
Rule 65    T -> X
Rule 66    expMult -> T multiplicacion X
Rule 67    expDiv -> T dividir X
Rule 68    X -> IDaux
Rule 69    X -> ID abreparentesis A cierraparentesis
Rule 70    X -> NUMaux
Rule 71    X -> abreparentesis E cierraparentesis
Rule 72    IDaux -> ID
Rule 73    NUMaux -> num
Rule 74    EL -> AL
Rule 75    EL -> orAux
Rule 76    AL -> TL
Rule 77    AL -> andAux
Rule 78    orAux -> EL OR AL
Rule 79    andAux -> AL AND TL
Rule 80    TL -> abreparentesis EL cierraparentesis
Rule 81    TL -> Comp
Rule 82    Comp -> J W J
Rule 83    J -> ID abreparentesis A cierraparentesis
Rule 84    J -> IDoux
Rule 85    IDoux -> ID
Rule 86    IDoux -> num
Rule 87    W -> mayorigual
Rule 88    W -> menorigual
Rule 89    W -> menor
Rule 90    W -> mayor
Rule 91    W -> igualque
Rule 92    W -> diferenteque

Terminals, with rules where they appear

AND                  : 79
BEGIN                : 16
BREAK                : 33 51
ELSE                 : 25 28
END                  : 17
FLT                  : 10
FOR                  : 31
FUNCTION             : 22
ID                   : 8 20 22 24 28 39 40 45 48 55 69 72 83 85
IF                   : 25 28
INT                  : 9
LET                  : 6 7 28 31
LOOP                 : 50
OR                   : 78
PRINT                : 27
READ                 : 26
WHILE                : 42
abrellave            : 22 28 28 30 31 35 36 39 43 51
abreparentesis       : 7 24 26 27 28 30 31 56 69 71 80 83
asignacion           : 6 7 28 31 55
cierrallave          : 22 25 28 28 30 37 39 44 49 51
cierraparentesis     : 7 24 26 27 28 30 31 56 69 71 80 83
coma                 : 13
diferenteque         : 92
dividir              : 67
error                : 
igualque             : 91
mayor                : 90
mayorigual           : 87
menor                : 89
menorigual           : 88
multiplicacion       : 66
num                  : 11 13 21 46 48 73 86
puntoycoma           : 6 7 16 17 18 19 31 31
resta                : 62
suma                 : 48 61

Nonterminals, with rules where they appear

A                    : 7 13 39 54 56 69 83
AL                   : 74 78 79
Aaux                 : 12
Asignacion           : 32
B                    : 30
Comp                 : 81
D                    : 55
E                    : 55 61 62 71
EL                   : 25 28 29 30 47 78 80
F                    : 1 22
IDaux                : 68
IDoux                : 84
J                    : 82 82
K                    : 6 53
M                    : 41
Main                 : 1
NUMaux               : 70
Programa             : 0
S                    : 18 19 22
T                    : 60 61 62 66 67
TL                   : 76 79
V                    : 2 6 7
VDummy               : 1
W                    : 82
X                    : 65 66 67
Z                    : 14 19 25 25 28 28 29 30 31
andAux               : 77
auxVar               : 6 7
auxVarArray          : 4
auxVarSimple         : 3
endAux               : 14
expDiv               : 64
expMult              : 63
expResta             : 59
expSuma              : 58
forAux               : 31
forAux2              : 31
forAux3              : 31
forAux4              : 31
forAux5              : 31
ifAux                : 25
ifAux2               : 25
ifAux3               : 25
loopAux              : 30
mainAux              : 14
orAux                : 75
printAux             : 27
readAux              : 26
readAux2             : 38
type                 : 8 45
whileAux             : 29
whileAux2            : 29
whileAux3            : 29

Parsing method: LALR

state 0

    (0) S' -> . Programa
    (1) Programa -> . VDummy F Main
    (2) VDummy -> . V
    (3) V -> . auxVarSimple
    (4) V -> . auxVarArray
    (5) V -> .
    (6) auxVarSimple -> . V LET auxVar asignacion K puntoycoma
    (7) auxVarArray -> . V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma

    LET             reduce using rule 5 (V -> .)
    FUNCTION        reduce using rule 5 (V -> .)
    BEGIN           reduce using rule 5 (V -> .)
    $end            reduce using rule 5 (V -> .)

    Programa                       shift and go to state 1
    VDummy                         shift and go to state 2
    V                              shift and go to state 3
    auxVarSimple                   shift and go to state 4
    auxVarArray                    shift and go to state 5

state 1

    (0) S' -> Programa .



state 2

    (1) Programa -> VDummy . F Main
    (22) F -> . F FUNCTION ID abrellave S cierrallave
    (23) F -> .

    FUNCTION        reduce using rule 23 (F -> .)
    BEGIN           reduce using rule 23 (F -> .)
    $end            reduce using rule 23 (F -> .)

    F                              shift and go to state 6

state 3

    (2) VDummy -> V .
    (6) auxVarSimple -> V . LET auxVar asignacion K puntoycoma
    (7) auxVarArray -> V . LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma

    FUNCTION        reduce using rule 2 (VDummy -> V .)
    BEGIN           reduce using rule 2 (VDummy -> V .)
    $end            reduce using rule 2 (VDummy -> V .)
    LET             shift and go to state 7


state 4

    (3) V -> auxVarSimple .

    LET             reduce using rule 3 (V -> auxVarSimple .)
    FUNCTION        reduce using rule 3 (V -> auxVarSimple .)
    BEGIN           reduce using rule 3 (V -> auxVarSimple .)
    $end            reduce using rule 3 (V -> auxVarSimple .)


state 5

    (4) V -> auxVarArray .

    LET             reduce using rule 4 (V -> auxVarArray .)
    FUNCTION        reduce using rule 4 (V -> auxVarArray .)
    BEGIN           reduce using rule 4 (V -> auxVarArray .)
    $end            reduce using rule 4 (V -> auxVarArray .)


state 6

    (1) Programa -> VDummy F . Main
    (22) F -> F . FUNCTION ID abrellave S cierrallave
    (14) Main -> . mainAux Z endAux
    (15) Main -> .
    (16) mainAux -> . BEGIN puntoycoma

    FUNCTION        shift and go to state 9
    $end            reduce using rule 15 (Main -> .)
    BEGIN           shift and go to state 11

    Main                           shift and go to state 8
    mainAux                        shift and go to state 10

state 7

    (6) auxVarSimple -> V LET . auxVar asignacion K puntoycoma
    (7) auxVarArray -> V LET . auxVar asignacion abreparentesis A cierraparentesis puntoycoma
    (8) auxVar -> . type ID
    (9) type -> . INT
    (10) type -> . FLT

    INT             shift and go to state 14
    FLT             shift and go to state 15

    auxVar                         shift and go to state 12
    type                           shift and go to state 13

state 8

    (1) Programa -> VDummy F Main .

    $end            reduce using rule 1 (Programa -> VDummy F Main .)


state 9

    (22) F -> F FUNCTION . ID abrellave S cierrallave

    ID              shift and go to state 16


state 10

    (14) Main -> mainAux . Z endAux
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 17
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 11

    (16) mainAux -> BEGIN . puntoycoma

    puntoycoma      shift and go to state 31


state 12

    (6) auxVarSimple -> V LET auxVar . asignacion K puntoycoma
    (7) auxVarArray -> V LET auxVar . asignacion abreparentesis A cierraparentesis puntoycoma

    asignacion      shift and go to state 32


state 13

    (8) auxVar -> type . ID

    ID              shift and go to state 33


state 14

    (9) type -> INT .

    ID              reduce using rule 9 (type -> INT .)


state 15

    (10) type -> FLT .

    ID              reduce using rule 10 (type -> FLT .)


state 16

    (22) F -> F FUNCTION ID . abrellave S cierrallave

    abrellave       shift and go to state 34


state 17

    (14) Main -> mainAux Z . endAux
    (19) Z -> Z . S puntoycoma
    (17) endAux -> . END puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    END             shift and go to state 37
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    endAux                         shift and go to state 35
    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 18

    (18) Z -> S . puntoycoma

    puntoycoma      shift and go to state 38


state 19

    (24) S -> ID . abreparentesis cierraparentesis
    (55) Asignacion -> ID . D asignacion E
    (56) D -> . abreparentesis A cierraparentesis
    (57) D -> .

    abreparentesis  shift and go to state 39
    asignacion      reduce using rule 57 (D -> .)

    D                              shift and go to state 40

state 20

    (25) S -> IF . EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    EL                             shift and go to state 41
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 21

    (26) S -> READ . abreparentesis readAux cierraparentesis

    abreparentesis  shift and go to state 52


state 22

    (27) S -> PRINT . abreparentesis printAux cierraparentesis

    abreparentesis  shift and go to state 53


state 23

    (28) S -> LET . ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    ID              shift and go to state 54


state 24

    (29) S -> whileAux . EL whileAux2 Z whileAux3
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    EL                             shift and go to state 55
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 25

    (30) S -> loopAux . abrellave Z abreparentesis EL cierraparentesis B cierrallave

    abrellave       shift and go to state 56


state 26

    (31) S -> FOR . abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    abreparentesis  shift and go to state 57


state 27

    (32) S -> Asignacion .

    puntoycoma      reduce using rule 32 (S -> Asignacion .)
    cierrallave     reduce using rule 32 (S -> Asignacion .)


state 28

    (33) S -> BREAK .

    puntoycoma      reduce using rule 33 (S -> BREAK .)
    cierrallave     reduce using rule 33 (S -> BREAK .)


state 29

    (42) whileAux -> WHILE .

    abreparentesis  reduce using rule 42 (whileAux -> WHILE .)
    ID              reduce using rule 42 (whileAux -> WHILE .)
    num             reduce using rule 42 (whileAux -> WHILE .)


state 30

    (50) loopAux -> LOOP .

    abrellave       reduce using rule 50 (loopAux -> LOOP .)


state 31

    (16) mainAux -> BEGIN puntoycoma .

    ID              reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    IF              reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    READ            reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    PRINT           reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    LET             reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    FOR             reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    BREAK           reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    WHILE           reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    LOOP            reduce using rule 16 (mainAux -> BEGIN puntoycoma .)
    puntoycoma      reduce using rule 16 (mainAux -> BEGIN puntoycoma .)


state 32

    (6) auxVarSimple -> V LET auxVar asignacion . K puntoycoma
    (7) auxVarArray -> V LET auxVar asignacion . abreparentesis A cierraparentesis puntoycoma
    (20) K -> . ID
    (21) K -> . num

    abreparentesis  shift and go to state 59
    ID              shift and go to state 60
    num             shift and go to state 61

    K                              shift and go to state 58

state 33

    (8) auxVar -> type ID .

    asignacion      reduce using rule 8 (auxVar -> type ID .)


state 34

    (22) F -> F FUNCTION ID abrellave . S cierrallave
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    cierrallave     reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    S                              shift and go to state 62
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 35

    (14) Main -> mainAux Z endAux .

    $end            reduce using rule 14 (Main -> mainAux Z endAux .)


state 36

    (19) Z -> Z S . puntoycoma

    puntoycoma      shift and go to state 63


state 37

    (17) endAux -> END . puntoycoma

    puntoycoma      shift and go to state 64


state 38

    (18) Z -> S puntoycoma .

    END             reduce using rule 18 (Z -> S puntoycoma .)
    ID              reduce using rule 18 (Z -> S puntoycoma .)
    IF              reduce using rule 18 (Z -> S puntoycoma .)
    READ            reduce using rule 18 (Z -> S puntoycoma .)
    PRINT           reduce using rule 18 (Z -> S puntoycoma .)
    LET             reduce using rule 18 (Z -> S puntoycoma .)
    FOR             reduce using rule 18 (Z -> S puntoycoma .)
    BREAK           reduce using rule 18 (Z -> S puntoycoma .)
    WHILE           reduce using rule 18 (Z -> S puntoycoma .)
    LOOP            reduce using rule 18 (Z -> S puntoycoma .)
    puntoycoma      reduce using rule 18 (Z -> S puntoycoma .)
    abreparentesis  reduce using rule 18 (Z -> S puntoycoma .)
    cierrallave     reduce using rule 18 (Z -> S puntoycoma .)


state 39

    (24) S -> ID abreparentesis . cierraparentesis
    (56) D -> abreparentesis . A cierraparentesis
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    cierraparentesis shift and go to state 65
    num             shift and go to state 67

    A                              shift and go to state 66
    Aaux                           shift and go to state 68

state 40

    (55) Asignacion -> ID D . asignacion E

    asignacion      shift and go to state 69


state 41

    (25) S -> IF EL . ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (78) orAux -> EL . OR AL
    (35) ifAux -> . abrellave

    OR              shift and go to state 71
    abrellave       shift and go to state 72

    ifAux                          shift and go to state 70

state 42

    (74) EL -> AL .
    (79) andAux -> AL . AND TL

    OR              reduce using rule 74 (EL -> AL .)
    abrellave       reduce using rule 74 (EL -> AL .)
    cierraparentesis reduce using rule 74 (EL -> AL .)
    puntoycoma      reduce using rule 74 (EL -> AL .)
    AND             shift and go to state 73


state 43

    (75) EL -> orAux .

    OR              reduce using rule 75 (EL -> orAux .)
    abrellave       reduce using rule 75 (EL -> orAux .)
    cierraparentesis reduce using rule 75 (EL -> orAux .)
    puntoycoma      reduce using rule 75 (EL -> orAux .)


state 44

    (76) AL -> TL .

    AND             reduce using rule 76 (AL -> TL .)
    OR              reduce using rule 76 (AL -> TL .)
    abrellave       reduce using rule 76 (AL -> TL .)
    cierraparentesis reduce using rule 76 (AL -> TL .)
    puntoycoma      reduce using rule 76 (AL -> TL .)


state 45

    (77) AL -> andAux .

    AND             reduce using rule 77 (AL -> andAux .)
    OR              reduce using rule 77 (AL -> andAux .)
    abrellave       reduce using rule 77 (AL -> andAux .)
    cierraparentesis reduce using rule 77 (AL -> andAux .)
    puntoycoma      reduce using rule 77 (AL -> andAux .)


state 46

    (80) TL -> abreparentesis . EL cierraparentesis
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    EL                             shift and go to state 74
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 47

    (81) TL -> Comp .

    AND             reduce using rule 81 (TL -> Comp .)
    OR              reduce using rule 81 (TL -> Comp .)
    abrellave       reduce using rule 81 (TL -> Comp .)
    cierraparentesis reduce using rule 81 (TL -> Comp .)
    puntoycoma      reduce using rule 81 (TL -> Comp .)


state 48

    (82) Comp -> J . W J
    (87) W -> . mayorigual
    (88) W -> . menorigual
    (89) W -> . menor
    (90) W -> . mayor
    (91) W -> . igualque
    (92) W -> . diferenteque

    mayorigual      shift and go to state 76
    menorigual      shift and go to state 77
    menor           shift and go to state 78
    mayor           shift and go to state 79
    igualque        shift and go to state 80
    diferenteque    shift and go to state 81

    W                              shift and go to state 75

state 49

    (83) J -> ID . abreparentesis A cierraparentesis
    (85) IDoux -> ID .

    abreparentesis  shift and go to state 82
    mayorigual      reduce using rule 85 (IDoux -> ID .)
    menorigual      reduce using rule 85 (IDoux -> ID .)
    menor           reduce using rule 85 (IDoux -> ID .)
    mayor           reduce using rule 85 (IDoux -> ID .)
    igualque        reduce using rule 85 (IDoux -> ID .)
    diferenteque    reduce using rule 85 (IDoux -> ID .)
    AND             reduce using rule 85 (IDoux -> ID .)
    OR              reduce using rule 85 (IDoux -> ID .)
    abrellave       reduce using rule 85 (IDoux -> ID .)
    cierraparentesis reduce using rule 85 (IDoux -> ID .)
    puntoycoma      reduce using rule 85 (IDoux -> ID .)


state 50

    (84) J -> IDoux .

    mayorigual      reduce using rule 84 (J -> IDoux .)
    menorigual      reduce using rule 84 (J -> IDoux .)
    menor           reduce using rule 84 (J -> IDoux .)
    mayor           reduce using rule 84 (J -> IDoux .)
    igualque        reduce using rule 84 (J -> IDoux .)
    diferenteque    reduce using rule 84 (J -> IDoux .)
    AND             reduce using rule 84 (J -> IDoux .)
    OR              reduce using rule 84 (J -> IDoux .)
    abrellave       reduce using rule 84 (J -> IDoux .)
    cierraparentesis reduce using rule 84 (J -> IDoux .)
    puntoycoma      reduce using rule 84 (J -> IDoux .)


state 51

    (86) IDoux -> num .

    mayorigual      reduce using rule 86 (IDoux -> num .)
    menorigual      reduce using rule 86 (IDoux -> num .)
    menor           reduce using rule 86 (IDoux -> num .)
    mayor           reduce using rule 86 (IDoux -> num .)
    igualque        reduce using rule 86 (IDoux -> num .)
    diferenteque    reduce using rule 86 (IDoux -> num .)
    AND             reduce using rule 86 (IDoux -> num .)
    OR              reduce using rule 86 (IDoux -> num .)
    abrellave       reduce using rule 86 (IDoux -> num .)
    cierraparentesis reduce using rule 86 (IDoux -> num .)
    puntoycoma      reduce using rule 86 (IDoux -> num .)


state 52

    (26) S -> READ abreparentesis . readAux cierraparentesis
    (38) readAux -> . readAux2
    (39) readAux -> . ID abrellave A cierrallave
    (40) readAux2 -> . ID

    ID              shift and go to state 85

    readAux                        shift and go to state 83
    readAux2                       shift and go to state 84

state 53

    (27) S -> PRINT abreparentesis . printAux cierraparentesis
    (41) printAux -> . M
    (53) M -> . K
    (54) M -> . A
    (20) K -> . ID
    (21) K -> . num
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    ID              shift and go to state 60
    num             shift and go to state 90

    printAux                       shift and go to state 86
    M                              shift and go to state 87
    K                              shift and go to state 88
    A                              shift and go to state 89
    Aaux                           shift and go to state 68

state 54

    (28) S -> LET ID . asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    asignacion      shift and go to state 91


state 55

    (29) S -> whileAux EL . whileAux2 Z whileAux3
    (78) orAux -> EL . OR AL
    (43) whileAux2 -> . abrellave

    OR              shift and go to state 71
    abrellave       shift and go to state 93

    whileAux2                      shift and go to state 92

state 56

    (30) S -> loopAux abrellave . Z abreparentesis EL cierraparentesis B cierrallave
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    loopAux                        shift and go to state 25
    Z                              shift and go to state 94
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    Asignacion                     shift and go to state 27

state 57

    (31) S -> FOR abreparentesis . LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    LET             shift and go to state 95


state 58

    (6) auxVarSimple -> V LET auxVar asignacion K . puntoycoma

    puntoycoma      shift and go to state 96


state 59

    (7) auxVarArray -> V LET auxVar asignacion abreparentesis . A cierraparentesis puntoycoma
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    num             shift and go to state 67

    A                              shift and go to state 97
    Aaux                           shift and go to state 68

state 60

    (20) K -> ID .

    puntoycoma      reduce using rule 20 (K -> ID .)
    cierraparentesis reduce using rule 20 (K -> ID .)


state 61

    (21) K -> num .

    puntoycoma      reduce using rule 21 (K -> num .)


state 62

    (22) F -> F FUNCTION ID abrellave S . cierrallave

    cierrallave     shift and go to state 98


state 63

    (19) Z -> Z S puntoycoma .

    END             reduce using rule 19 (Z -> Z S puntoycoma .)
    ID              reduce using rule 19 (Z -> Z S puntoycoma .)
    IF              reduce using rule 19 (Z -> Z S puntoycoma .)
    READ            reduce using rule 19 (Z -> Z S puntoycoma .)
    PRINT           reduce using rule 19 (Z -> Z S puntoycoma .)
    LET             reduce using rule 19 (Z -> Z S puntoycoma .)
    FOR             reduce using rule 19 (Z -> Z S puntoycoma .)
    BREAK           reduce using rule 19 (Z -> Z S puntoycoma .)
    WHILE           reduce using rule 19 (Z -> Z S puntoycoma .)
    LOOP            reduce using rule 19 (Z -> Z S puntoycoma .)
    puntoycoma      reduce using rule 19 (Z -> Z S puntoycoma .)
    abreparentesis  reduce using rule 19 (Z -> Z S puntoycoma .)
    cierrallave     reduce using rule 19 (Z -> Z S puntoycoma .)


state 64

    (17) endAux -> END puntoycoma .

    $end            reduce using rule 17 (endAux -> END puntoycoma .)


state 65

    (24) S -> ID abreparentesis cierraparentesis .

    puntoycoma      reduce using rule 24 (S -> ID abreparentesis cierraparentesis .)
    cierrallave     reduce using rule 24 (S -> ID abreparentesis cierraparentesis .)


state 66

    (56) D -> abreparentesis A . cierraparentesis
    (13) Aaux -> A . coma num

    cierraparentesis shift and go to state 99
    coma            shift and go to state 100


state 67

    (11) A -> num .

    cierraparentesis reduce using rule 11 (A -> num .)
    coma            reduce using rule 11 (A -> num .)
    cierrallave     reduce using rule 11 (A -> num .)


state 68

    (12) A -> Aaux .

    cierraparentesis reduce using rule 12 (A -> Aaux .)
    coma            reduce using rule 12 (A -> Aaux .)
    cierrallave     reduce using rule 12 (A -> Aaux .)


state 69

    (55) Asignacion -> ID D asignacion . E
    (58) E -> . expSuma
    (59) E -> . expResta
    (60) E -> . T
    (61) expSuma -> . E suma T
    (62) expResta -> . E resta T
    (63) T -> . expMult
    (64) T -> . expDiv
    (65) T -> . X
    (66) expMult -> . T multiplicacion X
    (67) expDiv -> . T dividir X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    E                              shift and go to state 102
    expSuma                        shift and go to state 103
    expResta                       shift and go to state 104
    T                              shift and go to state 105
    expMult                        shift and go to state 106
    expDiv                         shift and go to state 107
    X                              shift and go to state 108
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 70

    (25) S -> IF EL ifAux . Z cierrallave ELSE ifAux2 Z ifAux3
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 113
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 71

    (78) orAux -> EL OR . AL
    (76) AL -> . TL
    (77) AL -> . andAux
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    AL                             shift and go to state 114
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 72

    (35) ifAux -> abrellave .

    ID              reduce using rule 35 (ifAux -> abrellave .)
    IF              reduce using rule 35 (ifAux -> abrellave .)
    READ            reduce using rule 35 (ifAux -> abrellave .)
    PRINT           reduce using rule 35 (ifAux -> abrellave .)
    LET             reduce using rule 35 (ifAux -> abrellave .)
    FOR             reduce using rule 35 (ifAux -> abrellave .)
    BREAK           reduce using rule 35 (ifAux -> abrellave .)
    WHILE           reduce using rule 35 (ifAux -> abrellave .)
    LOOP            reduce using rule 35 (ifAux -> abrellave .)
    puntoycoma      reduce using rule 35 (ifAux -> abrellave .)


state 73

    (79) andAux -> AL AND . TL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    TL                             shift and go to state 115
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 74

    (80) TL -> abreparentesis EL . cierraparentesis
    (78) orAux -> EL . OR AL

    cierraparentesis shift and go to state 116
    OR              shift and go to state 71


state 75

    (82) Comp -> J W . J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    ID              shift and go to state 49
    num             shift and go to state 51

    J                              shift and go to state 117
    IDoux                          shift and go to state 50

state 76

    (87) W -> mayorigual .

    ID              reduce using rule 87 (W -> mayorigual .)
    num             reduce using rule 87 (W -> mayorigual .)


state 77

    (88) W -> menorigual .

    ID              reduce using rule 88 (W -> menorigual .)
    num             reduce using rule 88 (W -> menorigual .)


state 78

    (89) W -> menor .

    ID              reduce using rule 89 (W -> menor .)
    num             reduce using rule 89 (W -> menor .)


state 79

    (90) W -> mayor .

    ID              reduce using rule 90 (W -> mayor .)
    num             reduce using rule 90 (W -> mayor .)


state 80

    (91) W -> igualque .

    ID              reduce using rule 91 (W -> igualque .)
    num             reduce using rule 91 (W -> igualque .)


state 81

    (92) W -> diferenteque .

    ID              reduce using rule 92 (W -> diferenteque .)
    num             reduce using rule 92 (W -> diferenteque .)


state 82

    (83) J -> ID abreparentesis . A cierraparentesis
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    num             shift and go to state 67

    A                              shift and go to state 118
    Aaux                           shift and go to state 68

state 83

    (26) S -> READ abreparentesis readAux . cierraparentesis

    cierraparentesis shift and go to state 119


state 84

    (38) readAux -> readAux2 .

    cierraparentesis reduce using rule 38 (readAux -> readAux2 .)


state 85

    (39) readAux -> ID . abrellave A cierrallave
    (40) readAux2 -> ID .

    abrellave       shift and go to state 120
    cierraparentesis reduce using rule 40 (readAux2 -> ID .)


state 86

    (27) S -> PRINT abreparentesis printAux . cierraparentesis

    cierraparentesis shift and go to state 121


state 87

    (41) printAux -> M .

    cierraparentesis reduce using rule 41 (printAux -> M .)


state 88

    (53) M -> K .

    cierraparentesis reduce using rule 53 (M -> K .)


state 89

    (54) M -> A .
    (13) Aaux -> A . coma num

    cierraparentesis reduce using rule 54 (M -> A .)
    coma            shift and go to state 100


state 90

    (21) K -> num .
    (11) A -> num .

  ! reduce/reduce conflict for cierraparentesis resolved using rule 11 (A -> num .)
    coma            reduce using rule 11 (A -> num .)
    cierraparentesis reduce using rule 11 (A -> num .)

  ! cierraparentesis [ reduce using rule 21 (K -> num .) ]


state 91

    (28) S -> LET ID asignacion . IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    IF              shift and go to state 122


state 92

    (29) S -> whileAux EL whileAux2 . Z whileAux3
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    whileAux                       shift and go to state 24
    Z                              shift and go to state 123
    S                              shift and go to state 18
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 93

    (43) whileAux2 -> abrellave .

    ID              reduce using rule 43 (whileAux2 -> abrellave .)
    IF              reduce using rule 43 (whileAux2 -> abrellave .)
    READ            reduce using rule 43 (whileAux2 -> abrellave .)
    PRINT           reduce using rule 43 (whileAux2 -> abrellave .)
    LET             reduce using rule 43 (whileAux2 -> abrellave .)
    FOR             reduce using rule 43 (whileAux2 -> abrellave .)
    BREAK           reduce using rule 43 (whileAux2 -> abrellave .)
    WHILE           reduce using rule 43 (whileAux2 -> abrellave .)
    LOOP            reduce using rule 43 (whileAux2 -> abrellave .)
    puntoycoma      reduce using rule 43 (whileAux2 -> abrellave .)


state 94

    (30) S -> loopAux abrellave Z . abreparentesis EL cierraparentesis B cierrallave
    (19) Z -> Z . S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    abreparentesis  shift and go to state 124
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    loopAux                        shift and go to state 25
    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    Asignacion                     shift and go to state 27

state 95

    (31) S -> FOR abreparentesis LET . forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (45) forAux -> . type ID
    (9) type -> . INT
    (10) type -> . FLT

    INT             shift and go to state 14
    FLT             shift and go to state 15

    forAux                         shift and go to state 125
    type                           shift and go to state 126

state 96

    (6) auxVarSimple -> V LET auxVar asignacion K puntoycoma .

    LET             reduce using rule 6 (auxVarSimple -> V LET auxVar asignacion K puntoycoma .)
    FUNCTION        reduce using rule 6 (auxVarSimple -> V LET auxVar asignacion K puntoycoma .)
    BEGIN           reduce using rule 6 (auxVarSimple -> V LET auxVar asignacion K puntoycoma .)
    $end            reduce using rule 6 (auxVarSimple -> V LET auxVar asignacion K puntoycoma .)


state 97

    (7) auxVarArray -> V LET auxVar asignacion abreparentesis A . cierraparentesis puntoycoma
    (13) Aaux -> A . coma num

    cierraparentesis shift and go to state 127
    coma            shift and go to state 100


state 98

    (22) F -> F FUNCTION ID abrellave S cierrallave .

    FUNCTION        reduce using rule 22 (F -> F FUNCTION ID abrellave S cierrallave .)
    BEGIN           reduce using rule 22 (F -> F FUNCTION ID abrellave S cierrallave .)
    $end            reduce using rule 22 (F -> F FUNCTION ID abrellave S cierrallave .)


state 99

    (56) D -> abreparentesis A cierraparentesis .

    asignacion      reduce using rule 56 (D -> abreparentesis A cierraparentesis .)


state 100

    (13) Aaux -> A coma . num

    num             shift and go to state 128


state 101

    (69) X -> ID . abreparentesis A cierraparentesis
    (72) IDaux -> ID .

    abreparentesis  shift and go to state 129
    multiplicacion  reduce using rule 72 (IDaux -> ID .)
    dividir         reduce using rule 72 (IDaux -> ID .)
    suma            reduce using rule 72 (IDaux -> ID .)
    resta           reduce using rule 72 (IDaux -> ID .)
    puntoycoma      reduce using rule 72 (IDaux -> ID .)
    cierrallave     reduce using rule 72 (IDaux -> ID .)
    cierraparentesis reduce using rule 72 (IDaux -> ID .)


state 102

    (55) Asignacion -> ID D asignacion E .
    (61) expSuma -> E . suma T
    (62) expResta -> E . resta T

    puntoycoma      reduce using rule 55 (Asignacion -> ID D asignacion E .)
    cierrallave     reduce using rule 55 (Asignacion -> ID D asignacion E .)
    suma            shift and go to state 130
    resta           shift and go to state 131


state 103

    (58) E -> expSuma .

    suma            reduce using rule 58 (E -> expSuma .)
    resta           reduce using rule 58 (E -> expSuma .)
    puntoycoma      reduce using rule 58 (E -> expSuma .)
    cierrallave     reduce using rule 58 (E -> expSuma .)
    cierraparentesis reduce using rule 58 (E -> expSuma .)


state 104

    (59) E -> expResta .

    suma            reduce using rule 59 (E -> expResta .)
    resta           reduce using rule 59 (E -> expResta .)
    puntoycoma      reduce using rule 59 (E -> expResta .)
    cierrallave     reduce using rule 59 (E -> expResta .)
    cierraparentesis reduce using rule 59 (E -> expResta .)


state 105

    (60) E -> T .
    (66) expMult -> T . multiplicacion X
    (67) expDiv -> T . dividir X

    suma            reduce using rule 60 (E -> T .)
    resta           reduce using rule 60 (E -> T .)
    puntoycoma      reduce using rule 60 (E -> T .)
    cierrallave     reduce using rule 60 (E -> T .)
    cierraparentesis reduce using rule 60 (E -> T .)
    multiplicacion  shift and go to state 132
    dividir         shift and go to state 133


state 106

    (63) T -> expMult .

    multiplicacion  reduce using rule 63 (T -> expMult .)
    dividir         reduce using rule 63 (T -> expMult .)
    suma            reduce using rule 63 (T -> expMult .)
    resta           reduce using rule 63 (T -> expMult .)
    puntoycoma      reduce using rule 63 (T -> expMult .)
    cierrallave     reduce using rule 63 (T -> expMult .)
    cierraparentesis reduce using rule 63 (T -> expMult .)


state 107

    (64) T -> expDiv .

    multiplicacion  reduce using rule 64 (T -> expDiv .)
    dividir         reduce using rule 64 (T -> expDiv .)
    suma            reduce using rule 64 (T -> expDiv .)
    resta           reduce using rule 64 (T -> expDiv .)
    puntoycoma      reduce using rule 64 (T -> expDiv .)
    cierrallave     reduce using rule 64 (T -> expDiv .)
    cierraparentesis reduce using rule 64 (T -> expDiv .)


state 108

    (65) T -> X .

    multiplicacion  reduce using rule 65 (T -> X .)
    dividir         reduce using rule 65 (T -> X .)
    suma            reduce using rule 65 (T -> X .)
    resta           reduce using rule 65 (T -> X .)
    puntoycoma      reduce using rule 65 (T -> X .)
    cierrallave     reduce using rule 65 (T -> X .)
    cierraparentesis reduce using rule 65 (T -> X .)


state 109

    (68) X -> IDaux .

    multiplicacion  reduce using rule 68 (X -> IDaux .)
    dividir         reduce using rule 68 (X -> IDaux .)
    suma            reduce using rule 68 (X -> IDaux .)
    resta           reduce using rule 68 (X -> IDaux .)
    puntoycoma      reduce using rule 68 (X -> IDaux .)
    cierrallave     reduce using rule 68 (X -> IDaux .)
    cierraparentesis reduce using rule 68 (X -> IDaux .)


state 110

    (71) X -> abreparentesis . E cierraparentesis
    (58) E -> . expSuma
    (59) E -> . expResta
    (60) E -> . T
    (61) expSuma -> . E suma T
    (62) expResta -> . E resta T
    (63) T -> . expMult
    (64) T -> . expDiv
    (65) T -> . X
    (66) expMult -> . T multiplicacion X
    (67) expDiv -> . T dividir X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    E                              shift and go to state 134
    expSuma                        shift and go to state 103
    expResta                       shift and go to state 104
    T                              shift and go to state 105
    expMult                        shift and go to state 106
    expDiv                         shift and go to state 107
    X                              shift and go to state 108
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 111

    (70) X -> NUMaux .

    multiplicacion  reduce using rule 70 (X -> NUMaux .)
    dividir         reduce using rule 70 (X -> NUMaux .)
    suma            reduce using rule 70 (X -> NUMaux .)
    resta           reduce using rule 70 (X -> NUMaux .)
    puntoycoma      reduce using rule 70 (X -> NUMaux .)
    cierrallave     reduce using rule 70 (X -> NUMaux .)
    cierraparentesis reduce using rule 70 (X -> NUMaux .)


state 112

    (73) NUMaux -> num .

    multiplicacion  reduce using rule 73 (NUMaux -> num .)
    dividir         reduce using rule 73 (NUMaux -> num .)
    suma            reduce using rule 73 (NUMaux -> num .)
    resta           reduce using rule 73 (NUMaux -> num .)
    puntoycoma      reduce using rule 73 (NUMaux -> num .)
    cierrallave     reduce using rule 73 (NUMaux -> num .)
    cierraparentesis reduce using rule 73 (NUMaux -> num .)


state 113

    (25) S -> IF EL ifAux Z . cierrallave ELSE ifAux2 Z ifAux3
    (19) Z -> Z . S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 135
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 114

    (78) orAux -> EL OR AL .
    (79) andAux -> AL . AND TL

    OR              reduce using rule 78 (orAux -> EL OR AL .)
    abrellave       reduce using rule 78 (orAux -> EL OR AL .)
    cierraparentesis reduce using rule 78 (orAux -> EL OR AL .)
    puntoycoma      reduce using rule 78 (orAux -> EL OR AL .)
    AND             shift and go to state 73


state 115

    (79) andAux -> AL AND TL .

    AND             reduce using rule 79 (andAux -> AL AND TL .)
    OR              reduce using rule 79 (andAux -> AL AND TL .)
    abrellave       reduce using rule 79 (andAux -> AL AND TL .)
    cierraparentesis reduce using rule 79 (andAux -> AL AND TL .)
    puntoycoma      reduce using rule 79 (andAux -> AL AND TL .)


state 116

    (80) TL -> abreparentesis EL cierraparentesis .

    AND             reduce using rule 80 (TL -> abreparentesis EL cierraparentesis .)
    OR              reduce using rule 80 (TL -> abreparentesis EL cierraparentesis .)
    abrellave       reduce using rule 80 (TL -> abreparentesis EL cierraparentesis .)
    cierraparentesis reduce using rule 80 (TL -> abreparentesis EL cierraparentesis .)
    puntoycoma      reduce using rule 80 (TL -> abreparentesis EL cierraparentesis .)


state 117

    (82) Comp -> J W J .

    AND             reduce using rule 82 (Comp -> J W J .)
    OR              reduce using rule 82 (Comp -> J W J .)
    abrellave       reduce using rule 82 (Comp -> J W J .)
    cierraparentesis reduce using rule 82 (Comp -> J W J .)
    puntoycoma      reduce using rule 82 (Comp -> J W J .)


state 118

    (83) J -> ID abreparentesis A . cierraparentesis
    (13) Aaux -> A . coma num

    cierraparentesis shift and go to state 136
    coma            shift and go to state 100


state 119

    (26) S -> READ abreparentesis readAux cierraparentesis .

    puntoycoma      reduce using rule 26 (S -> READ abreparentesis readAux cierraparentesis .)
    cierrallave     reduce using rule 26 (S -> READ abreparentesis readAux cierraparentesis .)


state 120

    (39) readAux -> ID abrellave . A cierrallave
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    num             shift and go to state 67

    A                              shift and go to state 137
    Aaux                           shift and go to state 68

state 121

    (27) S -> PRINT abreparentesis printAux cierraparentesis .

    puntoycoma      reduce using rule 27 (S -> PRINT abreparentesis printAux cierraparentesis .)
    cierrallave     reduce using rule 27 (S -> PRINT abreparentesis printAux cierraparentesis .)


state 122

    (28) S -> LET ID asignacion IF . abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave

    abreparentesis  shift and go to state 138


state 123

    (29) S -> whileAux EL whileAux2 Z . whileAux3
    (19) Z -> Z . S puntoycoma
    (44) whileAux3 -> . cierrallave
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 140
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    whileAux                       shift and go to state 24
    whileAux3                      shift and go to state 139
    S                              shift and go to state 36
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 124

    (30) S -> loopAux abrellave Z abreparentesis . EL cierraparentesis B cierrallave
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    EL                             shift and go to state 141
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 125

    (31) S -> FOR abreparentesis LET forAux . asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    asignacion      shift and go to state 142


state 126

    (45) forAux -> type . ID

    ID              shift and go to state 143


state 127

    (7) auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis . puntoycoma

    puntoycoma      shift and go to state 144


state 128

    (13) Aaux -> A coma num .

    cierraparentesis reduce using rule 13 (Aaux -> A coma num .)
    coma            reduce using rule 13 (Aaux -> A coma num .)
    cierrallave     reduce using rule 13 (Aaux -> A coma num .)


state 129

    (69) X -> ID abreparentesis . A cierraparentesis
    (11) A -> . num
    (12) A -> . Aaux
    (13) Aaux -> . A coma num

    num             shift and go to state 67

    A                              shift and go to state 145
    Aaux                           shift and go to state 68

state 130

    (61) expSuma -> E suma . T
    (63) T -> . expMult
    (64) T -> . expDiv
    (65) T -> . X
    (66) expMult -> . T multiplicacion X
    (67) expDiv -> . T dividir X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    T                              shift and go to state 146
    expMult                        shift and go to state 106
    expDiv                         shift and go to state 107
    X                              shift and go to state 108
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 131

    (62) expResta -> E resta . T
    (63) T -> . expMult
    (64) T -> . expDiv
    (65) T -> . X
    (66) expMult -> . T multiplicacion X
    (67) expDiv -> . T dividir X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    T                              shift and go to state 147
    expMult                        shift and go to state 106
    expDiv                         shift and go to state 107
    X                              shift and go to state 108
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 132

    (66) expMult -> T multiplicacion . X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    X                              shift and go to state 148
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 133

    (67) expDiv -> T dividir . X
    (68) X -> . IDaux
    (69) X -> . ID abreparentesis A cierraparentesis
    (70) X -> . NUMaux
    (71) X -> . abreparentesis E cierraparentesis
    (72) IDaux -> . ID
    (73) NUMaux -> . num

    ID              shift and go to state 101
    abreparentesis  shift and go to state 110
    num             shift and go to state 112

    X                              shift and go to state 149
    IDaux                          shift and go to state 109
    NUMaux                         shift and go to state 111

state 134

    (71) X -> abreparentesis E . cierraparentesis
    (61) expSuma -> E . suma T
    (62) expResta -> E . resta T

    cierraparentesis shift and go to state 150
    suma            shift and go to state 130
    resta           shift and go to state 131


state 135

    (25) S -> IF EL ifAux Z cierrallave . ELSE ifAux2 Z ifAux3

    ELSE            shift and go to state 151


state 136

    (83) J -> ID abreparentesis A cierraparentesis .

    mayorigual      reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    menorigual      reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    menor           reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    mayor           reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    igualque        reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    diferenteque    reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    AND             reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    OR              reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    abrellave       reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    cierraparentesis reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)
    puntoycoma      reduce using rule 83 (J -> ID abreparentesis A cierraparentesis .)


state 137

    (39) readAux -> ID abrellave A . cierrallave
    (13) Aaux -> A . coma num

    cierrallave     shift and go to state 152
    coma            shift and go to state 100


state 138

    (28) S -> LET ID asignacion IF abreparentesis . EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    EL                             shift and go to state 153
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 139

    (29) S -> whileAux EL whileAux2 Z whileAux3 .

    puntoycoma      reduce using rule 29 (S -> whileAux EL whileAux2 Z whileAux3 .)
    cierrallave     reduce using rule 29 (S -> whileAux EL whileAux2 Z whileAux3 .)


state 140

    (44) whileAux3 -> cierrallave .

    puntoycoma      reduce using rule 44 (whileAux3 -> cierrallave .)
    cierrallave     reduce using rule 44 (whileAux3 -> cierrallave .)


state 141

    (30) S -> loopAux abrellave Z abreparentesis EL . cierraparentesis B cierrallave
    (78) orAux -> EL . OR AL

    cierraparentesis shift and go to state 154
    OR              shift and go to state 71


state 142

    (31) S -> FOR abreparentesis LET forAux asignacion . forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (46) forAux2 -> . num

    num             shift and go to state 156

    forAux2                        shift and go to state 155

state 143

    (45) forAux -> type ID .

    asignacion      reduce using rule 45 (forAux -> type ID .)


state 144

    (7) auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma .

    LET             reduce using rule 7 (auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma .)
    FUNCTION        reduce using rule 7 (auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma .)
    BEGIN           reduce using rule 7 (auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma .)
    $end            reduce using rule 7 (auxVarArray -> V LET auxVar asignacion abreparentesis A cierraparentesis puntoycoma .)


state 145

    (69) X -> ID abreparentesis A . cierraparentesis
    (13) Aaux -> A . coma num

    cierraparentesis shift and go to state 157
    coma            shift and go to state 100


state 146

    (61) expSuma -> E suma T .
    (66) expMult -> T . multiplicacion X
    (67) expDiv -> T . dividir X

    suma            reduce using rule 61 (expSuma -> E suma T .)
    resta           reduce using rule 61 (expSuma -> E suma T .)
    puntoycoma      reduce using rule 61 (expSuma -> E suma T .)
    cierrallave     reduce using rule 61 (expSuma -> E suma T .)
    cierraparentesis reduce using rule 61 (expSuma -> E suma T .)
    multiplicacion  shift and go to state 132
    dividir         shift and go to state 133


state 147

    (62) expResta -> E resta T .
    (66) expMult -> T . multiplicacion X
    (67) expDiv -> T . dividir X

    suma            reduce using rule 62 (expResta -> E resta T .)
    resta           reduce using rule 62 (expResta -> E resta T .)
    puntoycoma      reduce using rule 62 (expResta -> E resta T .)
    cierrallave     reduce using rule 62 (expResta -> E resta T .)
    cierraparentesis reduce using rule 62 (expResta -> E resta T .)
    multiplicacion  shift and go to state 132
    dividir         shift and go to state 133


state 148

    (66) expMult -> T multiplicacion X .

    multiplicacion  reduce using rule 66 (expMult -> T multiplicacion X .)
    dividir         reduce using rule 66 (expMult -> T multiplicacion X .)
    suma            reduce using rule 66 (expMult -> T multiplicacion X .)
    resta           reduce using rule 66 (expMult -> T multiplicacion X .)
    puntoycoma      reduce using rule 66 (expMult -> T multiplicacion X .)
    cierrallave     reduce using rule 66 (expMult -> T multiplicacion X .)
    cierraparentesis reduce using rule 66 (expMult -> T multiplicacion X .)


state 149

    (67) expDiv -> T dividir X .

    multiplicacion  reduce using rule 67 (expDiv -> T dividir X .)
    dividir         reduce using rule 67 (expDiv -> T dividir X .)
    suma            reduce using rule 67 (expDiv -> T dividir X .)
    resta           reduce using rule 67 (expDiv -> T dividir X .)
    puntoycoma      reduce using rule 67 (expDiv -> T dividir X .)
    cierrallave     reduce using rule 67 (expDiv -> T dividir X .)
    cierraparentesis reduce using rule 67 (expDiv -> T dividir X .)


state 150

    (71) X -> abreparentesis E cierraparentesis .

    multiplicacion  reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    dividir         reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    suma            reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    resta           reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    puntoycoma      reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    cierrallave     reduce using rule 71 (X -> abreparentesis E cierraparentesis .)
    cierraparentesis reduce using rule 71 (X -> abreparentesis E cierraparentesis .)


state 151

    (25) S -> IF EL ifAux Z cierrallave ELSE . ifAux2 Z ifAux3
    (36) ifAux2 -> . abrellave

    abrellave       shift and go to state 159

    ifAux2                         shift and go to state 158

state 152

    (39) readAux -> ID abrellave A cierrallave .

    cierraparentesis reduce using rule 39 (readAux -> ID abrellave A cierrallave .)


state 153

    (28) S -> LET ID asignacion IF abreparentesis EL . cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (78) orAux -> EL . OR AL

    cierraparentesis shift and go to state 160
    OR              shift and go to state 71


state 154

    (30) S -> loopAux abrellave Z abreparentesis EL cierraparentesis . B cierrallave
    (51) B -> . abrellave BREAK cierrallave
    (52) B -> .

    abrellave       shift and go to state 161
    cierrallave     reduce using rule 52 (B -> .)

    B                              shift and go to state 162

state 155

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 . puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    puntoycoma      shift and go to state 163


state 156

    (46) forAux2 -> num .

    puntoycoma      reduce using rule 46 (forAux2 -> num .)


state 157

    (69) X -> ID abreparentesis A cierraparentesis .

    multiplicacion  reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    dividir         reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    suma            reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    resta           reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    puntoycoma      reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    cierrallave     reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)
    cierraparentesis reduce using rule 69 (X -> ID abreparentesis A cierraparentesis .)


state 158

    (25) S -> IF EL ifAux Z cierrallave ELSE ifAux2 . Z ifAux3
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 164
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 159

    (36) ifAux2 -> abrellave .

    ID              reduce using rule 36 (ifAux2 -> abrellave .)
    IF              reduce using rule 36 (ifAux2 -> abrellave .)
    READ            reduce using rule 36 (ifAux2 -> abrellave .)
    PRINT           reduce using rule 36 (ifAux2 -> abrellave .)
    LET             reduce using rule 36 (ifAux2 -> abrellave .)
    FOR             reduce using rule 36 (ifAux2 -> abrellave .)
    BREAK           reduce using rule 36 (ifAux2 -> abrellave .)
    WHILE           reduce using rule 36 (ifAux2 -> abrellave .)
    LOOP            reduce using rule 36 (ifAux2 -> abrellave .)
    puntoycoma      reduce using rule 36 (ifAux2 -> abrellave .)


state 160

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis . abrellave Z cierrallave ELSE abrellave Z cierrallave

    abrellave       shift and go to state 165


state 161

    (51) B -> abrellave . BREAK cierrallave

    BREAK           shift and go to state 166


state 162

    (30) S -> loopAux abrellave Z abreparentesis EL cierraparentesis B . cierrallave

    cierrallave     shift and go to state 167


state 163

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma . forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (47) forAux3 -> . EL
    (74) EL -> . AL
    (75) EL -> . orAux
    (76) AL -> . TL
    (77) AL -> . andAux
    (78) orAux -> . EL OR AL
    (80) TL -> . abreparentesis EL cierraparentesis
    (81) TL -> . Comp
    (79) andAux -> . AL AND TL
    (82) Comp -> . J W J
    (83) J -> . ID abreparentesis A cierraparentesis
    (84) J -> . IDoux
    (85) IDoux -> . ID
    (86) IDoux -> . num

    abreparentesis  shift and go to state 46
    ID              shift and go to state 49
    num             shift and go to state 51

    forAux3                        shift and go to state 168
    EL                             shift and go to state 169
    AL                             shift and go to state 42
    orAux                          shift and go to state 43
    TL                             shift and go to state 44
    andAux                         shift and go to state 45
    Comp                           shift and go to state 47
    J                              shift and go to state 48
    IDoux                          shift and go to state 50

state 164

    (25) S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z . ifAux3
    (19) Z -> Z . S puntoycoma
    (37) ifAux3 -> . cierrallave
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 170
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    ifAux3                         shift and go to state 171
    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 165

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave . Z cierrallave ELSE abrellave Z cierrallave
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 172
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 166

    (51) B -> abrellave BREAK . cierrallave

    cierrallave     shift and go to state 173


state 167

    (30) S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .

    puntoycoma      reduce using rule 30 (S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .)
    cierrallave     reduce using rule 30 (S -> loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave .)


state 168

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 . puntoycoma forAux4 cierraparentesis abrellave Z forAux5

    puntoycoma      shift and go to state 174


state 169

    (47) forAux3 -> EL .
    (78) orAux -> EL . OR AL

    puntoycoma      reduce using rule 47 (forAux3 -> EL .)
    OR              shift and go to state 71


state 170

    (37) ifAux3 -> cierrallave .

    puntoycoma      reduce using rule 37 (ifAux3 -> cierrallave .)
    cierrallave     reduce using rule 37 (ifAux3 -> cierrallave .)


state 171

    (25) S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .

    puntoycoma      reduce using rule 25 (S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .)
    cierrallave     reduce using rule 25 (S -> IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3 .)


state 172

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z . cierrallave ELSE abrellave Z cierrallave
    (19) Z -> Z . S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 175
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 173

    (51) B -> abrellave BREAK cierrallave .

    cierrallave     reduce using rule 51 (B -> abrellave BREAK cierrallave .)


state 174

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma . forAux4 cierraparentesis abrellave Z forAux5
    (48) forAux4 -> . ID suma num

    ID              shift and go to state 177

    forAux4                        shift and go to state 176

state 175

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave . ELSE abrellave Z cierrallave

    ELSE            shift and go to state 178


state 176

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 . cierraparentesis abrellave Z forAux5

    cierraparentesis shift and go to state 179


state 177

    (48) forAux4 -> ID . suma num

    suma            shift and go to state 180


state 178

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE . abrellave Z cierrallave

    abrellave       shift and go to state 181


state 179

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis . abrellave Z forAux5

    abrellave       shift and go to state 182


state 180

    (48) forAux4 -> ID suma . num

    num             shift and go to state 183


state 181

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave . Z cierrallave
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 184
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 182

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave . Z forAux5
    (18) Z -> . S puntoycoma
    (19) Z -> . Z S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    Z                              shift and go to state 185
    S                              shift and go to state 18
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 183

    (48) forAux4 -> ID suma num .

    cierraparentesis reduce using rule 48 (forAux4 -> ID suma num .)


state 184

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z . cierrallave
    (19) Z -> Z . S puntoycoma
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 186
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 185

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z . forAux5
    (19) Z -> Z . S puntoycoma
    (49) forAux5 -> . cierrallave
    (24) S -> . ID abreparentesis cierraparentesis
    (25) S -> . IF EL ifAux Z cierrallave ELSE ifAux2 Z ifAux3
    (26) S -> . READ abreparentesis readAux cierraparentesis
    (27) S -> . PRINT abreparentesis printAux cierraparentesis
    (28) S -> . LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave
    (29) S -> . whileAux EL whileAux2 Z whileAux3
    (30) S -> . loopAux abrellave Z abreparentesis EL cierraparentesis B cierrallave
    (31) S -> . FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5
    (32) S -> . Asignacion
    (33) S -> . BREAK
    (34) S -> .
    (42) whileAux -> . WHILE
    (50) loopAux -> . LOOP
    (55) Asignacion -> . ID D asignacion E

    cierrallave     shift and go to state 188
    ID              shift and go to state 19
    IF              shift and go to state 20
    READ            shift and go to state 21
    PRINT           shift and go to state 22
    LET             shift and go to state 23
    FOR             shift and go to state 26
    BREAK           shift and go to state 28
    puntoycoma      reduce using rule 34 (S -> .)
    WHILE           shift and go to state 29
    LOOP            shift and go to state 30

    forAux5                        shift and go to state 187
    S                              shift and go to state 36
    whileAux                       shift and go to state 24
    loopAux                        shift and go to state 25
    Asignacion                     shift and go to state 27

state 186

    (28) S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .

    puntoycoma      reduce using rule 28 (S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .)
    cierrallave     reduce using rule 28 (S -> LET ID asignacion IF abreparentesis EL cierraparentesis abrellave Z cierrallave ELSE abrellave Z cierrallave .)


state 187

    (31) S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .

    puntoycoma      reduce using rule 31 (S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .)
    cierrallave     reduce using rule 31 (S -> FOR abreparentesis LET forAux asignacion forAux2 puntoycoma forAux3 puntoycoma forAux4 cierraparentesis abrellave Z forAux5 .)


state 188

    (49) forAux5 -> cierrallave .

    puntoycoma      reduce using rule 49 (forAux5 -> cierrallave .)
    cierrallave     reduce using rule 49 (forAux5 -> cierrallave .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 90 resolved using rule (A -> num)
WARNING: rejected rule (K -> num) in state 90
